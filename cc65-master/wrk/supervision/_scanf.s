;
; File generated by cc65 v 2.14.0
;
	.fopt		compiler,"cc65 v 2.14.0"
	.setcpu		"65SC02"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.import		_memset
	.import		__setjmp
	.import		_longjmp
	.import		__seterrno
	.import		__ctype
	.import		_isspace
	.import		_isxdigit
	.import		_tolower
	.export		__scanf

.segment	"RODATA"

_Bits:
	.byte	$01
	.byte	$02
	.byte	$04
	.byte	$08
	.byte	$10
	.byte	$20
	.byte	$40
	.byte	$80

.segment	"BSS"

_format:
	.res	2,$00
_D_:
	.res	2,$00
_ap:
	.res	2,$00
_JumpBuf:
	.res	5,$00
_F:
	.res	1,$00
_CharCount:
	.res	2,$00
_C:
	.res	2,$00
_Width:
	.res	2,$00
_IntVal:
	.res	4,$00
_Assignments:
	.res	2,$00
_IntBytes:
	.res	1,$00
_Converted:
	.res	1,$00
_Positive:
	.res	1,$00
_NoAssign:
	.res	1,$00
_Invert:
	.res	1,$00
_CharSet:
	.res	32,$00

; ---------------------------------------------------------------
; int __near__ __fastcall__ _scanf (__near__ const struct scanfdata*, __near__ const unsigned char*, __near__ unsigned char*)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	__scanf: near

.segment	"BSS"

L018A:
	.res	1,$00
L018B:
	.res	1,$00
L018C:
	.res	1,$00

.segment	"CODE"

	jsr     pushax
	lda     regbank+4
	ldx     regbank+5
	jsr     pushax
	ldy     #$07
	lda     (sp),y
	sta     _D_+1
	dey
	lda     (sp),y
	sta     _D_
	dey
	lda     (sp),y
	sta     _format+1
	dey
	lda     (sp),y
	sta     _format
	dey
	lda     (sp),y
	sta     _ap+1
	dey
	lda     (sp),y
	sta     _ap
	stz     _Converted
	stz     _Assignments
	stz     _Assignments+1
	stz     _CharCount
	stz     _CharCount+1
	lda     #<(_JumpBuf)
	ldx     #>(_JumpBuf)
	jsr     __setjmp
	cmp     #$00
	jne     L0199
L019C:	jsr     _ReadChar
	jmp     L01A0
L019E:	lda     _F
	cmp     #$25
	beq     L01A2
	ldx     #$00
	jsr     _isspace
	tax
	beq     L01A4
	jsr     _SkipWhite
	jmp     L01A0
L01A4:	lda     _C
	ldx     _C+1
	jsr     pushax
	lda     _F
	jsr     tosicmp0
	beq     L019C
	jmp     L0199
L01A2:	jsr     _GetFormat
	cmp     #$25
	beq     L01A4
	lda     _F
	cmp     #$2A
	jsr     booleq
	sta     _NoAssign
	lda     _NoAssign
	beq     L01B2
	jsr     _GetFormat
L01B2:	lda     #$FF
	sta     _Width
	sta     _Width+1
	ldy     _F
	lda     __ctype,y
	and     #$04
	sta     L018A
	lda     L018A
	beq     L01C9
	stz     _Width
	stz     _Width+1
L01C8:	lda     _Width
	ldx     _Width+1
	jsr     mulax10
	sta     ptr1
	stx     ptr1+1
	lda     _F
	and     #$0F
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L0337
	inx
L0337:	sta     _Width
	stx     _Width+1
	jsr     _GetFormat
	tay
	lda     __ctype,y
	and     #$04
	tax
	bne     L01C8
L01C9:	lda     _Width
	ora     _Width+1
	bne     L01DA
	lda     #$07
	jsr     __seterrno
	jmp     L033E
L01DA:	lda     _Width
	ldx     _Width+1
	jsr     complax
	sta     _Width
	stx     _Width+1
	lda     #$01
	sta     _IntBytes
	lda     _F
	cmp     #$4C
	beq     L01FE
	cmp     #$68
	beq     L01EB
	cmp     #$6A
	beq     L0326
	cmp     #$6C
	beq     L01F4
	cmp     #$74
	beq     L01FE
	cmp     #$7A
	beq     L01FE
	bra     L0327
L01EB:	lda     _format
	sta     ptr1
	lda     _format+1
	sta     ptr1+1
	lda     (ptr1)
	cmp     #$68
	bne     L01FE
	stz     _IntBytes
	inc     _format
	bne     L01FE
	inc     _format+1
	bra     L01FE
L01F4:	lda     _format
	sta     ptr1
	lda     _format+1
	sta     ptr1+1
	lda     (ptr1)
	cmp     #$6C
	bne     L0326
	inc     _format
	bne     L0326
	inc     _format+1
L0326:	lda     #$03
	sta     _IntBytes
L01FE:	jsr     _GetFormat
L0327:	lda     _F
	cmp     #$41
	jeq     L02F6
	cmp     #$43
	jeq     L02F6
	cmp     #$45
	jeq     L02F6
	cmp     #$46
	jeq     L02F6
	cmp     #$47
	jeq     L02F6
	cmp     #$53
	jeq     L02F6
	cmp     #$58
	beq     L0216
	cmp     #$5B
	jeq     L0268
	cmp     #$61
	jeq     L02F6
	cmp     #$63
	jeq     L032A
	cmp     #$64
	beq     L0208
	cmp     #$65
	jeq     L02F6
	cmp     #$66
	jeq     L02F6
	cmp     #$67
	jeq     L02F6
	cmp     #$69
	beq     L020E
	cmp     #$6E
	jeq     L02E6
	cmp     #$6F
	beq     L0212
	cmp     #$70
	jeq     L02CC
	cmp     #$73
	beq     L021C
	cmp     #$75
	beq     L0208
	cmp     #$78
	beq     L0216
	jmp     L030F
L0208:	lda     #$0A
	jsr     _ScanInt
	jmp     L01A0
L020E:	lda     #$00
	jsr     _ScanInt
	jmp     L01A0
L0212:	lda     #$08
	jsr     _ScanInt
	jmp     L01A0
L0216:	lda     #$10
	jsr     _ScanInt
	jmp     L01A0
L021C:	jsr     _SkipWhite
	jsr     _CheckEnd
	lda     #$01
	sta     _Converted
	lda     _NoAssign
	bne     L022D
	lda     _ap
	sec
	sbc     #$02
	sta     _ap
	bcs     L022A
	dec     _ap+1
L022A:	ldx     _ap+1
	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	lda     (ptr1)
	sta     regbank+4
	stx     regbank+4+1
	bra     L022D
L0328:	lda     _NoAssign
	bne     L0234
	lda     regbank+4
	ldx     regbank+4+1
	sta     regsave
	stx     regsave+1
	ina
	bne     L0237
	inx
L0237:	sta     regbank+4
	stx     regbank+4+1
	lda     _C
	sta     (regsave)
L0234:	jsr     _ReadChar
L022D:	lda     _C+1
	cmp     #$FF
	bne     L0338
	lda     _C
	cmp     #$FF
	beq     L0329
L0338:	lda     _C
	ldx     _C+1
	jsr     _isspace
	cmp     #$00
	bne     L0329
	inc     _Width
	bne     L0232
	inc     _Width+1
L0232:	lda     _Width
	ora     _Width+1
	bne     L0328
L0329:	lda     _NoAssign
	jne     L01A0
	sta     (regbank+4)
	inc     _Assignments
	jne     L01A0
	inc     _Assignments+1
	jmp     L01A0
L032A:	lda     L018A
	bne     L0242
	ldx     #$FF
	lda     #$FE
	sta     _Width
	stx     _Width+1
L0242:	jsr     _CheckEnd
	lda     #$01
	sta     _Converted
	lda     _NoAssign
	bne     L0262
	lda     _ap
	sec
	sbc     #$02
	sta     _ap
	bcs     L0252
	dec     _ap+1
L0252:	ldx     _ap+1
	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	lda     (ptr1)
	sta     regbank+4
	stx     regbank+4+1
	bra     L0255
L0253:	jsr     _CheckEnd
	lda     regbank+4
	ldx     regbank+4+1
	sta     regsave
	stx     regsave+1
	ina
	bne     L025A
	inx
L025A:	sta     regbank+4
	stx     regbank+4+1
	lda     _C
	sta     (regsave)
	jsr     _ReadChar
L0255:	inc     _Width
	bne     L0257
	inc     _Width+1
L0257:	lda     _Width
	ora     _Width+1
	bne     L0253
	inc     _Assignments
	jne     L01A0
	inc     _Assignments+1
	jmp     L01A0
L0260:	jsr     _CheckEnd
	jsr     _ReadChar
L0262:	inc     _Width
	bne     L0264
	inc     _Width+1
L0264:	lda     _Width
	ora     _Width+1
	bne     L0260
	jmp     L01A0
L0268:	ldy     #$1F
	lda     #$00
L026E:	sta     _CharSet,y
	dey
	bpl     L026E
	jsr     _GetFormat
	cmp     #$5E
	jsr     booleq
	sta     _Invert
	lda     _Invert
	beq     L032B
	jsr     _GetFormat
L032B:	lda     _F
	cmp     #$5D
	bne     L032C
	bra     L0280
L027A:	lda     _format
	sta     ptr1
	lda     _format+1
	sta     ptr1+1
	lda     (ptr1)
	cmp     #$2D
	bne     L0280
	lda     _F
	sta     L018C
	inc     _format
	bne     L0285
	inc     _format+1
L0285:	jsr     _GetFormat
	cmp     #$00
	beq     L028A
	cmp     #$5D
	bne     L0292
L028A:	lda     L018C
	jsr     _AddCharToSet
	lda     #$2D
	jsr     _AddCharToSet
	bra     L032C
L0292:	lda     L018C
	jsr     _AddCharToSet
	lda     _F
	cmp     L018C
	beq     L0325
	inc     L018C
	bra     L0292
L0280:	lda     _F
	jsr     _AddCharToSet
L0325:	jsr     _GetFormat
L032C:	lda     _F
	beq     L0330
	cmp     #$5D
	bne     L027A
L0330:	lda     _F
	bne     L02A0
	lda     _format
	sec
	sbc     #$01
	sta     _format
	bcs     L02A0
	dec     _format+1
L02A0:	lda     _Invert
	beq     L033B
	jsr     _InvertCharSet
L033B:	stz     L018B
	lda     _NoAssign
	bne     L02B5
	lda     _ap
	sec
	sbc     #$02
	sta     _ap
	bcs     L02B2
	dec     _ap+1
L02B2:	ldx     _ap+1
	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	lda     (ptr1)
	sta     regbank+4
	stx     regbank+4+1
	bra     L02B5
L0331:	lda     _NoAssign
	bne     L0332
	lda     regbank+4
	ldx     regbank+4+1
	sta     regsave
	stx     regsave+1
	ina
	bne     L02BD
	inx
L02BD:	sta     regbank+4
	stx     regbank+4+1
	lda     _C
	sta     (regsave)
L0332:	lda     #$01
	sta     _Converted
	sta     L018B
	jsr     _ReadChar
L02B5:	jsr     _IsCharInSet
	tax
	beq     L0335
	inc     _Width
	bne     L02B8
	inc     _Width+1
L02B8:	lda     _Width
	ora     _Width+1
	bne     L0331
L0335:	lda     L018B
	jeq     L0199
	lda     _NoAssign
	jne     L01A0
	sta     (regbank+4)
	inc     _Assignments
	jne     L01A0
	inc     _Assignments+1
	bra     L01A0
L02CC:	jsr     _SkipWhite
	lda     _C
	cmp     #$30
	bne     L0199
	lda     #$01
	sta     _Converted
	jsr     _ReadChar
	lda     _C
	cmp     #$58
	beq     L02DB
	cmp     #$78
	bne     L0199
L02DB:	jsr     _ReadChar
	lda     #$10
	jsr     _ReadInt
	jsr     _AssignInt
	bra     L01A0
L02E6:	lda     _CharCount
	ldx     _CharCount+1
	jsr     pushax
	lda     _C+1
	cmp     #$FF
	bne     L02EC
	lda     _C
	cmp     #$FF
	bne     L02EC
	ina
	bra     L02EE
L02EC:	lda     #$01
L02EE:	jsr     tossuba0
	sta     _IntVal
	stx     _IntVal+1
	stz     _IntVal+2
	stz     _IntVal+3
	jsr     _AssignInt
	lda     _NoAssign
	bne     L01A0
	lda     _Assignments
	sec
	sbc     #$01
	sta     _Assignments
	bcs     L01A0
	dec     _Assignments+1
	bra     L01A0
L02F6:	lda     #$0D
	jsr     __seterrno
	bra     L033E
L030F:	lda     #$07
	jsr     __seterrno
	bra     L033E
L01A0:	jsr     _GetFormat
	tax
	jne     L019E
	bra     L0317
L0199:	lda     _C+1
	cmp     #$FF
	bne     L0317
	lda     _C
	cmp     #$FF
	bne     L0317
	lda     _Converted
	bne     L0317
L033E:	lda     #$FF
	sta     _Assignments
	sta     _Assignments+1
L0317:	jsr     _PushBack
	lda     _Assignments
	ldx     _Assignments+1
	pha
	lda     (sp)
	sta     regbank+4
	ldy     #$01
	lda     (sp),y
	sta     regbank+5
	pla
	jmp     incsp8

.endproc

; ---------------------------------------------------------------
; unsigned int __near__ FindBit (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_FindBit: near

.segment	"CODE"

	pha
	lsr     a
	lsr     a
	lsr     a
	tax
	pla
	and     #$07
	tay
	lda     _Bits,y
	jmp     L0010
L0010:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ __fastcall__ AddCharToSet (unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_AddCharToSet: near

.segment	"CODE"

	jsr     pusha
	jsr     _FindBit
	ora     _CharSet,x
	sta     _CharSet,x
	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ IsCharInSet (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_IsCharInSet: near

.segment	"CODE"

	lda     #$00
	ldx     _C+1
	bne     L1
	lda     _C
	jsr     _FindBit
	and     _CharSet,x
L1:	ldx     #$00
	jmp     L002D
L002D:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ InvertCharSet (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_InvertCharSet: near

.segment	"CODE"

	ldy     #$1F
L1:	lda     _CharSet,y
	eor     #$FF
	sta     _CharSet,y
	dey
	bpl     L1
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ PushBack (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_PushBack: near

.segment	"CODE"

	ldx     _C+1
	bne     L0055
	lda     _C
	jsr     pusha0
	lda     _D_
	sta     ptr1
	lda     _D_+1
	sta     ptr1+1
	ldy     #$02
	lda     (ptr1),y
	sta     jmpvec+1
	iny
	lda     (ptr1),y
	sta     jmpvec+2
	ldy     #$05
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     jmpvec
	lda     _CharCount
	bne     L0082
	dec     _CharCount+1
L0082:	dec     _CharCount
L0055:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ ReadChar (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_ReadChar: near

.segment	"CODE"

	lda     _D_
	sta     ptr1
	lda     _D_+1
	sta     ptr1+1
	lda     (ptr1)
	sta     jmpvec+1
	ldy     #$01
	lda     (ptr1),y
	sta     jmpvec+2
	ldy     #$05
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     jmpvec
	sta     _C
	stx     _C+1
	inx
	beq     L00B6
	inc     _CharCount
	bne     L00B6
	inc     _CharCount+1
L00B6:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ __fastcall__ Error (unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_Error: near

.segment	"CODE"

	jsr     pusha
	pha
	lda     #<(_JumpBuf)
	ldx     #>(_JumpBuf)
	jsr     pushax
	pla
	ldx     #>0
	jmp     _longjmp
	jsr     incsp1
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ CheckEnd (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_CheckEnd: near

.segment	"CODE"

	ldx     _C+1
	beq     L00D1
	lda     #$02
	jmp     _Error
L00D1:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ SkipWhite (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_SkipWhite: near

.segment	"CODE"

	bra     L00D7
L00D5:	jsr     _ReadChar
L00D7:	lda     _C
	ldx     _C+1
	jsr     _isspace
	tax
	bne     L00D5
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ ReadSign (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_ReadSign: near

.segment	"CODE"

	lda     _C
	cmp     #'-'
	bne     L00E3
	sta     _Converted
	jsr     _ReadChar
	lda     #$00
	beq     L00EC
L00E3:	cmp     #'+'
	bne     L00F1
	sta     _Converted
	jsr     _ReadChar
L00F1:	lda     #$01
L00EC:	sta     _Positive
	rts

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ __fastcall__ HexVal (unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_HexVal: near

.segment	"CODE"

	jsr     pusha
	lda     (sp)
	tay
	lda     __ctype,y
	and     #$04
	beq     L0108
	ldx     #$00
	lda     (sp)
	sec
	sbc     #$30
	bcs     L00FB
	dex
	jmp     incsp1
L0108:	lda     (sp)
	ldx     #$00
	jsr     _tolower
	sec
	sbc     #$57
	bcs     L00FB
	dex
L00FB:	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; void __near__ __fastcall__ ReadInt (unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_ReadInt: near

.segment	"BSS"

L0111:
	.res	1,$00
L0112:
	.res	1,$00

.segment	"CODE"

	jsr     pusha
	stz     L0112
	stz     _IntVal
	stz     _IntVal+1
	stz     _IntVal+2
	stz     _IntVal+3
	bra     L0118
L0340:	inc     L0112
	lda     _IntVal+3
	sta     sreg+1
	lda     _IntVal+2
	sta     sreg
	ldx     _IntVal+1
	lda     _IntVal
	jsr     pusheax
	ldy     #$04
	lda     (sp),y
	ldx     #$00
	jsr     tosmul0ax
	jsr     pusheax
	lda     L0111
	ldx     #$00
	jsr     tosadd0ax
	sta     _IntVal
	stx     _IntVal+1
	ldy     sreg
	sty     _IntVal+2
	ldy     sreg+1
	sty     _IntVal+3
	jsr     _ReadChar
L0118:	lda     _C
	ldx     _C+1
	jsr     _isxdigit
	tax
	beq     L0343
	inc     _Width
	bne     L011C
	inc     _Width+1
L011C:	lda     _Width
	ora     _Width+1
	beq     L0343
	lda     _C
	jsr     _HexVal
	sta     L0111
	cmp     (sp)
	txa
	sbc     #$00
	bcc     L0340
L0343:	lda     L0112
	bne     L0344
	ina
	jsr     _Error
L0344:	lda     #$01
	sta     _Converted
	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; void __near__ AssignInt (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_AssignInt: near

.segment	"CODE"

	lda     _NoAssign
	bne     L014A
	lda     _ap
	sec
	sbc     #$02
	sta     _ap
	bcs     L0136
	dec     _ap+1
L0136:	ldx     _ap+1
	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	lda     (ptr1)
	sta     ptr1
	stx     ptr1+1
	ldy     _IntBytes
L013D:	lda     _IntVal,y
	sta     (ptr1),y
	dey
	bpl     L013D
	inc     _Assignments
	bne     L014A
	inc     _Assignments+1
L014A:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ __fastcall__ ScanInt (unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_ScanInt: near

.segment	"CODE"

	jsr     pusha
	jsr     _SkipWhite
	jsr     _ReadSign
	lda     (sp)
	bne     L0348
	lda     _C
	cmp     #$30
	bne     L0347
	jsr     _ReadChar
	lda     _C
	cmp     #$58
	beq     L0345
	cmp     #$78
	bne     L0346
L0345:	lda     #$10
	sta     (sp)
	lda     #$01
	sta     _Converted
	jsr     _ReadChar
	bra     L0348
L0346:	lda     #$08
	sta     (sp)
	jsr     _PushBack
	lda     #$30
	sta     _C
	stz     _C+1
	bra     L0348
L0347:	lda     #$0A
	sta     (sp)
L0348:	lda     (sp)
	jsr     _ReadInt
	lda     _Positive
	bne     L0172
	lda     _IntVal+3
	sta     sreg+1
	lda     _IntVal+2
	sta     sreg
	ldx     _IntVal+1
	lda     _IntVal
	jsr     negeax
	sta     _IntVal
	stx     _IntVal+1
	ldy     sreg
	sty     _IntVal+2
	ldy     sreg+1
	sty     _IntVal+3
L0172:	jsr     _AssignInt
	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ GetFormat (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_GetFormat: near

.segment	"CODE"

	lda     _format
	sta     regsave
	lda     _format+1
	sta     regsave+1
	inc     _format
	bne     L017F
	inc     _format+1
L017F:	lda     (regsave)
	ldx     #>0
	sta     _F
	rts

.endproc

