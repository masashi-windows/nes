;
; File generated by cc65 v 2.14.0
;
	.fopt		compiler,"cc65 v 2.14.0"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.import		_open
	.import		_close
	.export		_exec
	.import		_exit
	.import		_utoa
	.import		_strncat
	.import		__mappederrno
	.import		_getcurrentdevice
	.importzp	_txtptr
	.import		_basbuf
	.importzp	_basbuf_len

.segment	"DATA"

.segment	"LOWCODE"
_basic:
	.byte	$00
	.addr	_basic+35
	.word	$0000
	.byte	$93
	.byte	$22,$22
	.byte	$AA
	.byte	$22
	.byte	$22,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
	.byte	$20,$20,$20,$20,$20
	.byte	$2C
	.byte	$30,$31,$00
.segment	"DATA"

; ---------------------------------------------------------------
; int __near__ __fastcall__ exec (__near__ const unsigned char*, __near__ const unsigned char*)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_exec: near

.segment	"DATA"

L0015:
	.byte	$00

.segment	"BSS"

L0013:
	.res	2,$00
L0014:
	.res	1,$00

.segment	"CODE"

	jsr     pushax
	jsr     _getcurrentdevice
	sta     L0014
	cmp     #$08
	bcs     L004E
	lda     L0014
	cmp     #$01
	bne     L004F
L004E:	lda     L0014
	cmp     #$1F
	bcc     L0019
L004F:	lda     #$09
	jsr     __mappederrno
	jmp     incsp4
L0019:	jsr     decsp4
	lda     L0014
	ldy     #$02
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	lda     #<(_basic+32)
	ldy     #$00
	sta     (sp),y
	iny
	lda     #>(_basic+32)
	sta     (sp),y
	ldx     #$00
	lda     #$0A
	jsr     _utoa
	jsr     decsp4
	ldy     #$07
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	ldy     #$02
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	lda     #$01
	ldy     #$00
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	ldy     #$04
	jsr     _open
	sta     L0013
	stx     L0013+1
	cpx     #$80
	bcc     L0027
	lda     L0013
	ldx     L0013+1
	jmp     incsp4
L0027:	lda     L0013
	ldx     L0013+1
	jsr     _close
L002C:	lda     #<(_basic+10)
	ldx     #>(_basic+10)
	clc
	adc     L0015
	bcc     L0033
	inx
L0033:	jsr     pushax
	ldy     #$05
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	ldy     L0015
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	ldy     #$00
	jsr     staspidx
	cmp     #$00
	beq     L002D
	inc     L0015
	lda     L0015
	cmp     #$14
	bcc     L002C
L002D:	ldy     L0015
	lda     #$22
	sta     _basic+10,y
	lda     #$8F
	sta     _basbuf
	lda     #$00
	sta     _basbuf+1
	tay
	lda     (sp),y
	iny
	ora     (sp),y
	beq     L0041
	jsr     decsp4
	lda     #<(_basbuf)
	iny
	sta     (sp),y
	iny
	lda     #>(_basbuf)
	sta     (sp),y
	ldy     #$05
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	ldy     #$00
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	lda     #<(_basbuf_len)
	ldx     #>(_basbuf_len)
	sec
	sbc     #$02
	bcs     L0048
	dex
L0048:	jsr     _strncat
L0041:	lda     #<(_basic)
	ldx     #>(_basic)
	sta     _txtptr
	stx     _txtptr+1
	jsr     _exit
	jmp     incsp4

.endproc

