;
; File generated by cc65 v 2.14.0
;
	.fopt		compiler,"cc65 v 2.14.0"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.import		_exit
	.import		_strlen
	.import		_clrscr
	.import		_kbhit
	.import		_gotoxy
	.import		_wherex
	.import		_cputc
	.import		_cputcxy
	.import		_cputsxy
	.import		_cgetc
	.import		_cursor
	.import		_revers
	.import		_textcolor
	.import		_bgcolor
	.import		_bordercolor
	.import		_chline
	.import		_chlinexy
	.import		_cvlinexy
	.import		_cclearxy
	.import		_cputhex8
	.import		_cputhex16
	.import		__ctype
	.import		_toupper
	.import		_brk_a
	.import		_brk_x
	.import		_brk_y
	.import		_brk_sr
	.import		_brk_pc
	.import		_DbgDisAsm
	.import		_DbgDisAsmLen
	.import		_DbgIsRAM
	.import		_DbgMemDump
	.import		_DbgSP
	.import		_DbgCS
	.import		_DbgHI
	.export		_DbgBreakCount
	.export		_DbgBreaks
	.import		_DbgGetBreakSlot
	.import		_DbgIsBreak
	.export		_DbgEntry

.segment	"DATA"

_RegText:
	.byte	$01
	.byte	$00
	.addr	L0004
	.byte	$01
	.byte	$01
	.addr	L0008
	.byte	$01
	.byte	$02
	.addr	L000C
	.byte	$01
	.byte	$03
	.addr	L0010
	.byte	$01
	.byte	$04
	.addr	L0014
	.byte	$01
	.byte	$05
	.addr	L0018
	.byte	$01
	.byte	$06
	.addr	L001C
	.byte	$01
	.byte	$07
	.addr	L0020
_HelpText:
	.byte	$01
	.byte	$00
	.addr	L0024
	.byte	$01
	.byte	$01
	.addr	L0028
	.byte	$01
	.byte	$02
	.addr	L002C
	.byte	$01
	.byte	$03
	.addr	L0030
	.byte	$01
	.byte	$04
	.addr	L0034
	.byte	$01
	.byte	$05
	.addr	L0038
	.byte	$01
	.byte	$06
	.addr	L003C
	.byte	$01
	.byte	$07
	.addr	L0040
	.byte	$01
	.byte	$08
	.addr	L0044
	.byte	$01
	.byte	$09
	.addr	L0048
	.byte	$01
	.byte	$0A
	.addr	L004C
	.byte	$01
	.byte	$0B
	.addr	L0050
	.byte	$01
	.byte	$0C
	.addr	L0054
	.byte	$01
	.byte	$0D
	.addr	L0058
	.byte	$01
	.byte	$0E
	.addr	L005C
	.byte	$01
	.byte	$0F
	.addr	L0060
	.byte	$01
	.byte	$10
	.addr	L0064
	.byte	$01
	.byte	$11
	.addr	L0068
_AsmFrame:
	.byte	$14
	.byte	$16
	.byte	$0F
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$1E
	.byte	$0F
	.byte	$1D
	.byte	$0E
	.byte	$01
	.addr	_AsmHandler
	.byte	$00
	.word	$0000
_RegFrame:
	.byte	$16
	.byte	$12
	.byte	$0F
	.byte	$17
	.byte	$1E
	.byte	$00
	.byte	$27
	.byte	$09
	.byte	$08
	.byte	$08
	.byte	$01
	.addr	_RegHandler
	.byte	$08
	.addr	_RegText
_StackFrame:
	.byte	$0F
	.byte	$17
	.byte	$10
	.byte	$17
	.byte	$1E
	.byte	$09
	.byte	$27
	.byte	$0F
	.byte	$08
	.byte	$05
	.byte	$01
	.addr	_StackHandler
	.byte	$00
	.word	$0000
_CStackFrame:
	.byte	$10
	.byte	$17
	.byte	$15
	.byte	$08
	.byte	$1E
	.byte	$0F
	.byte	$27
	.byte	$18
	.byte	$08
	.byte	$08
	.byte	$01
	.addr	_CStackHandler
	.byte	$00
	.word	$0000
_DumpFrame:
	.byte	$0F
	.byte	$10
	.byte	$11
	.byte	$15
	.byte	$00
	.byte	$0F
	.byte	$1E
	.byte	$18
	.byte	$1D
	.byte	$08
	.byte	$01
	.addr	_DumpHandler
	.byte	$00
	.word	$0000
_HelpFrame:
	.byte	$14
	.byte	$12
	.byte	$11
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$27
	.byte	$18
	.byte	$26
	.byte	$17
	.byte	$00
	.addr	_HelpHandler
	.byte	$12
	.addr	_HelpText
_Frames:
	.addr	_AsmFrame
	.addr	_RegFrame
	.addr	_StackFrame
	.addr	_CStackFrame
	.addr	_DumpFrame
	.addr	_HelpFrame
_ActiveFrame:
	.word	$FFFF
_ActivePrompt:
	.word	$0000
_DbgBreakCount:
	.byte	$00

.segment	"RODATA"

L002C:
	.byte	$46,$33,$2C,$20,$75,$20,$20,$20,$20,$20,$52,$75,$6E,$20,$75,$6E
	.byte	$74,$69,$6C,$20,$73,$75,$62,$72,$6F,$75,$74,$69,$6E,$65,$20,$72
	.byte	$65,$74,$75,$72,$6E,$73,$00
L0239:
	.byte	$43,$61,$6E,$6E,$6F,$74,$20,$73,$65,$74,$20,$62,$72,$65,$61,$6B
	.byte	$70,$6F,$69,$6E,$74,$20,$2D,$20,$70,$72,$65,$73,$73,$20,$61,$20
	.byte	$6B,$65,$79,$00
L024D:
	.byte	$54,$6F,$6F,$20,$6D,$61,$6E,$79,$20,$62,$72,$65,$61,$6B,$70,$6F
	.byte	$69,$6E,$74,$73,$20,$2D,$20,$70,$72,$65,$73,$73,$20,$61,$20,$6B
	.byte	$65,$79,$00
L0068:
	.byte	$73,$20,$20,$20,$20,$20,$20,$20,$20,$20,$53,$6B,$69,$70,$20,$6E
	.byte	$65,$78,$74,$20,$69,$6E,$73,$74,$72,$75,$63,$74,$69,$6F,$6E,$00
L003C:
	.byte	$31,$2D,$35,$20,$20,$20,$20,$20,$20,$20,$53,$65,$6C,$65,$63,$74
	.byte	$20,$61,$63,$74,$69,$76,$65,$20,$77,$69,$6E,$64,$6F,$77,$00
L005C:
	.byte	$70,$20,$20,$20,$20,$20,$20,$20,$20,$20,$55,$73,$65,$20,$61,$73
	.byte	$20,$6E,$65,$77,$20,$50,$43,$20,$76,$61,$6C,$75,$65,$00
L0054:
	.byte	$66,$20,$20,$20,$20,$20,$20,$20,$20,$20,$46,$6F,$6C,$6C,$6F,$77
	.byte	$20,$69,$6E,$73,$74,$72,$75,$63,$74,$69,$6F,$6E,$00
L0028:
	.byte	$46,$32,$2C,$20,$74,$20,$20,$20,$20,$20,$54,$6F,$67,$67,$6C,$65
	.byte	$20,$62,$72,$65,$61,$6B,$70,$6F,$69,$6E,$74,$00
L0234:
	.byte	$49,$6E,$76,$61,$6C,$69,$64,$20,$69,$6E,$70,$75,$74,$20,$2D,$20
	.byte	$70,$72,$65,$73,$73,$20,$61,$20,$6B,$65,$79,$00
L0171:
	.byte	$50,$72,$65,$73,$73,$20,$61,$6E,$79,$20,$6B,$65,$79,$20,$74,$6F
	.byte	$20,$63,$6F,$6E,$74,$69,$6E,$75,$65,$00
L0030:
	.byte	$46,$34,$2C,$20,$68,$20,$20,$20,$20,$20,$52,$75,$6E,$20,$74,$6F
	.byte	$20,$63,$75,$72,$73,$6F,$72,$00
L0064:
	.byte	$72,$20,$20,$20,$20,$20,$20,$20,$20,$20,$52,$65,$64,$72,$61,$77
	.byte	$20,$73,$63,$72,$65,$65,$6E,$00
L004C:
	.byte	$61,$2F,$7A,$20,$20,$20,$20,$20,$20,$20,$4D,$6F,$76,$65,$20,$75
	.byte	$70,$2F,$64,$6F,$77,$6E,$00
L0048:
	.byte	$43,$75,$72,$73,$6F,$72,$20,$20,$20,$20,$4D,$6F,$76,$65,$20,$75
	.byte	$70,$2F,$64,$6F,$77,$6E,$00
L0058:
	.byte	$6F,$20,$20,$20,$20,$20,$20,$20,$20,$20,$47,$6F,$74,$6F,$20,$6F
	.byte	$72,$69,$67,$69,$6E,$00
L0034:
	.byte	$46,$37,$2C,$20,$73,$70,$61,$63,$65,$20,$53,$74,$65,$70,$20,$69
	.byte	$6E,$74,$6F,$00
L0038:
	.byte	$46,$38,$2C,$20,$65,$6E,$74,$65,$72,$20,$53,$74,$65,$70,$20,$6F
	.byte	$76,$65,$72,$00
L0040:
	.byte	$2B,$20,$20,$20,$20,$20,$20,$20,$20,$20,$50,$61,$67,$65,$20,$64
	.byte	$6F,$77,$6E,$00
L0050:
	.byte	$63,$20,$20,$20,$20,$20,$20,$20,$20,$20,$43,$6F,$6E,$74,$69,$6E
	.byte	$75,$65,$00
L0044:
	.byte	$2D,$20,$20,$20,$20,$20,$20,$20,$20,$20,$50,$61,$67,$65,$20,$75
	.byte	$70,$00
L016D:
	.byte	$50,$72,$65,$73,$73,$20,$46,$31,$20,$66,$6F,$72,$20,$68,$65,$6C
	.byte	$70,$00
L0060:
	.byte	$71,$20,$20,$20,$20,$20,$20,$20,$20,$20,$51,$75,$69,$74,$00
L0024:
	.byte	$46,$31,$2C,$20,$3F,$20,$20,$20,$20,$20,$48,$65,$6C,$70,$00
L022E:
	.byte	$47,$6F,$74,$6F,$3A,$20,$00
L0008:
	.byte	$53,$52,$00
L001C:
	.byte	$43,$53,$00
L0020:
	.byte	$48,$49,$00
L0018:
	.byte	$53,$50,$00
L03E6:
	.byte	$2D,$3E,$00
L0004:
	.byte	$50,$43,$00
L0010:
	.byte	$58,$00
L000C:
	.byte	$41,$00
L0014:
	.byte	$59,$00

.segment	"BSS"

_AsmAddr:
	.res	2,$00
_DumpAddr:
	.res	2,$00
_CStackAddr:
	.res	2,$00
_StackAddr:
	.res	1,$00
_PromptColor:
	.res	1,$00
_PromptLength:
	.res	1,$00
_DbgBreaks:
	.res	48,$00

; ---------------------------------------------------------------
; unsigned char __near__ AsmHandler (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_AsmHandler: near

.segment	"CODE"

	jsr     decsp3
L031F:	jsr     _UpdateAsm
	jsr     stax0sp
	jsr     _GetKeyUpdate
	ldy     #$02
	sta     (sp),y
	cmp     #$01
	jeq     L0346
	cmp     #$02
	jeq     L034E
	cmp     #$2B
	beq     L032A
	cmp     #$2D
	beq     L032E
	cmp     #$61
	jeq     L0346
	cmp     #$66
	beq     L0338
	cmp     #$67
	beq     L033B
	cmp     #$6F
	beq     L033F
	cmp     #$70
	beq     L0342
	cmp     #$74
	beq     L0334
	cmp     #$7A
	jeq     L034E
	jmp     L053F
L032A:	dey
	lda     (sp),y
	sta     _AsmAddr+1
	dey
	lda     (sp),y
	sta     _AsmAddr
	jmp     L031F
L032E:	jsr     decsp3
	lda     _AsmAddr
	dey
	sta     (sp),y
	iny
	lda     _AsmAddr+1
	sta     (sp),y
	lda     _AsmFrame+9
	ldy     #$00
	sta     (sp),y
	jsr     _AsmBack
	sta     _AsmAddr
	stx     _AsmAddr+1
	jmp     L031F
L0334:	lda     _AsmAddr
	ldx     _AsmAddr+1
	jsr     pushax
	jsr     _DbgToggleUserBreak
	jmp     L031F
L0338:	jsr     _AsmFollow
	jmp     L031F
L033B:	lda     #<(_AsmAddr)
	ldx     #>(_AsmAddr)
	jsr     pushax
	jsr     _InputGoto
	jmp     L031F
L033F:	jsr     _AsmHome
	jmp     L031F
L0342:	lda     _AsmAddr
	sta     _brk_pc
	lda     _AsmAddr+1
	sta     _brk_pc+1
	jmp     L031F
L0346:	jsr     decsp3
	lda     _AsmAddr
	dey
	sta     (sp),y
	iny
	lda     _AsmAddr+1
	sta     (sp),y
	lda     #$01
	ldy     #$00
	sta     (sp),y
	jsr     _AsmBack
	sta     _AsmAddr
	stx     _AsmAddr+1
	jmp     L031F
L034E:	lda     _AsmAddr
	ldx     _AsmAddr+1
	jsr     _DbgDisAsmLen
	clc
	adc     _AsmAddr
	sta     _AsmAddr
	txa
	adc     _AsmAddr+1
	sta     _AsmAddr+1
	jmp     L031F
L053F:	ldx     #$00
	lda     (sp),y
	jmp     incsp3

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ RegHandler (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_RegHandler: near

.segment	"CODE"

	jmp     _GetKeyUpdate

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ StackHandler (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_StackHandler: near

.segment	"CODE"

	jsr     decsp1
	lda     _StackFrame+9
	jsr     pusha
L03AE:	jsr     _GetKeyUpdate
	ldy     #$01
	sta     (sp),y
	cmp     #$01
	beq     L03C2
	cmp     #$02
	beq     L03C7
	cmp     #$2B
	beq     L03B7
	cmp     #$2D
	beq     L03BB
	cmp     #$61
	beq     L03C2
	cmp     #$6F
	beq     L03BF
	cmp     #$7A
	beq     L03C7
	jmp     L0540
L03B7:	dey
	lda     (sp),y
	clc
	adc     _StackAddr
	sta     _StackAddr
	jmp     L03B5
L03BB:	dey
	lda     (sp),y
	eor     #$FF
	sec
	adc     _StackAddr
	sta     _StackAddr
	jmp     L03B5
L03BF:	jsr     _StackHome
	jmp     L03B5
L03C2:	dec     _StackAddr
	jmp     L03B5
L03C7:	inc     _StackAddr
	jmp     L03B5
L0540:	ldx     #$00
	lda     (sp),y
	jmp     incsp2
L03B5:	jsr     _UpdateStack
	jmp     L03AE

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ CStackHandler (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_CStackHandler: near

.segment	"CODE"

	jsr     decsp1
	lda     _CStackFrame+9
	asl     a
	jsr     pusha
L03F2:	jsr     _GetKeyUpdate
	ldy     #$01
	sta     (sp),y
	cmp     #$01
	beq     L0406
	cmp     #$02
	beq     L0541
	cmp     #$2B
	beq     L03FB
	cmp     #$2D
	beq     L03FF
	cmp     #$61
	beq     L0406
	cmp     #$6F
	beq     L0403
	cmp     #$7A
	beq     L040D
	jmp     L0542
L03FB:	dey
	lda     (sp),y
	clc
	adc     _CStackAddr
	sta     _CStackAddr
	tya
	adc     _CStackAddr+1
	sta     _CStackAddr+1
	jmp     L03F9
L03FF:	dey
	lda     (sp),y
	eor     #$FF
	sec
	adc     _CStackAddr
	sta     _CStackAddr
	lda     #$FF
	adc     _CStackAddr+1
	sta     _CStackAddr+1
	jmp     L03F9
L0403:	jsr     _CStackHome
	jmp     L03F9
L0406:	lda     _CStackAddr
	sec
	sbc     #$02
	sta     _CStackAddr
	bcs     L03F9
	dec     _CStackAddr+1
	jmp     L03F9
L040D:	lda     #$02
L0541:	clc
	adc     _CStackAddr
	sta     _CStackAddr
	bcc     L03F9
	inc     _CStackAddr+1
	jmp     L03F9
L0542:	ldx     #$00
	lda     (sp),y
	jmp     incsp2
L03F9:	jsr     _UpdateCStack
	jmp     L03F2

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ DumpHandler (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_DumpHandler: near

.segment	"CODE"

	jsr     decsp1
	ldx     #$00
	lda     _DumpFrame+9
	jsr     shlax3
	jsr     pushax
L0435:	jsr     _GetKeyUpdate
	ldy     #$02
	sta     (sp),y
	cmp     #$01
	beq     L044D
	cmp     #$02
	beq     L0454
	cmp     #$2B
	beq     L043E
	cmp     #$2D
	beq     L0442
	cmp     #$61
	beq     L044D
	cmp     #$67
	beq     L0446
	cmp     #$6F
	beq     L044A
	cmp     #$7A
	beq     L0454
	jmp     L0543
L043E:	dey
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	clc
	adc     _DumpAddr
	sta     _DumpAddr
	txa
	adc     _DumpAddr+1
	sta     _DumpAddr+1
	jmp     L043C
L0442:	dey
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	eor     #$FF
	sec
	adc     _DumpAddr
	sta     _DumpAddr
	txa
	eor     #$FF
	adc     _DumpAddr+1
	sta     _DumpAddr+1
	jmp     L043C
L0446:	lda     #<(_DumpAddr)
	ldx     #>(_DumpAddr)
	jsr     pushax
	jsr     _InputGoto
	jmp     L043C
L044A:	jsr     _DumpHome
	jmp     L043C
L044D:	lda     _DumpAddr
	sec
	sbc     #$08
	sta     _DumpAddr
	bcs     L043C
	dec     _DumpAddr+1
	jmp     L043C
L0454:	lda     #$08
	clc
	adc     _DumpAddr
	sta     _DumpAddr
	bcc     L043C
	inc     _DumpAddr+1
	jmp     L043C
L0543:	ldx     #$00
	lda     (sp),y
	jmp     incsp3
L043C:	jsr     _UpdateDump
	jmp     L0435

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ HelpHandler (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_HelpHandler: near

.segment	"CODE"

	lda     _ActiveFrame
	ldx     _ActiveFrame+1
	jsr     pushax
	jsr     decsp3
	lda     #$05
	ldy     #$01
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	lda     #$01
	ldy     #$00
	sta     (sp),y
	jsr     _ActivateFrame
	jsr     _AnyKeyPrompt
	jsr     _cgetc
	ldy     #$00
	lda     (sp),y
	jsr     pusha
	jsr     _Redraw
	ldx     #$00
	txa
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ DisplayPrompt (__near__ unsigned char*)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_DisplayPrompt: near

.segment	"CODE"

	jsr     decsp1
	lda     #$01
	jsr     _textcolor
	ldy     #$00
	sta     (sp),y
	lda     _ActivePrompt
	ora     _ActivePrompt+1
	beq     L0152
	lda     _PromptColor
	jsr     _textcolor
	jsr     decsp2
	lda     #$28
	sec
	sbc     _PromptLength
	lsr     a
	ldy     #$01
	sta     (sp),y
	lda     #$18
	dey
	sta     (sp),y
	lda     _PromptLength
	jsr     _chlinexy
L0152:	ldy     #$02
	lda     (sp),y
	sta     _ActivePrompt+1
	dey
	lda     (sp),y
	sta     _ActivePrompt
	dey
	lda     (sp),y
	sta     _PromptColor
	lda     _ActivePrompt
	ldx     _ActivePrompt+1
	jsr     _strlen
	sta     _PromptLength
	lda     #$01
	jsr     _textcolor
	jsr     decsp2
	lda     #$28
	sec
	sbc     _PromptLength
	lsr     a
	ldy     #$01
	sta     (sp),y
	lda     #$18
	dey
	sta     (sp),y
	lda     _ActivePrompt
	ldx     _ActivePrompt+1
	jsr     _cputsxy
	lda     _PromptColor
	jsr     _textcolor
	jmp     incsp3

.endproc

; ---------------------------------------------------------------
; void __near__ SingleStep (unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_SingleStep: near

.segment	"CODE"

	jsr     decsp1
	lda     _brk_pc
	sta     ptr1
	lda     _brk_pc+1
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	cmp     #$10
	beq     L048F
	cmp     #$20
	jeq     L04A3
	cmp     #$30
	beq     L048F
	cmp     #$40
	beq     L049E
	cmp     #$4C
	beq     L0479
	cmp     #$50
	beq     L048F
	cmp     #$60
	beq     L049B
	cmp     #$6C
	beq     L047D
	cmp     #$70
	beq     L048F
	cmp     #$90
	beq     L048F
	cmp     #$B0
	beq     L048F
	cmp     #$D0
	beq     L048F
	cmp     #$F0
	beq     L048F
	jmp     L0477
L0479:	jsr     _GetArg16
	jmp     L0545
L047D:	jsr     _GetArg16
	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jmp     L0545
L048F:	lda     _brk_pc
	ldx     _brk_pc+1
	iny
	jsr     ldaidx
	dey
	sta     (sp),y
	lda     (sp),y
	beq     L0477
	ldx     #$00
	lda     (sp),y
	bpl     L0498
	dex
L0498:	clc
	adc     _brk_pc
	pha
	txa
	adc     _brk_pc+1
	tax
	pla
	clc
	adc     #$02
	bcc     L0499
	inx
L0499:	jsr     pushax
	jsr     _DbgSetTmpBreak
	jmp     L0477
L049B:	jsr     _SetRTSBreak
	jmp     incsp2
L049E:	lda     #$01
	jsr     pusha
	jsr     _GetStack16
	jmp     L0545
L04A3:	iny
	lda     (sp),y
	beq     L0477
	jsr     _GetArg16
	jmp     L0545
L0477:	lda     _brk_pc
	ldx     _brk_pc+1
	jsr     pushax
	lda     _brk_pc
	ldx     _brk_pc+1
	jsr     _DbgDisAsmLen
	jsr     tosaddax
L0545:	jsr     pushax
	jsr     _DbgSetTmpBreak
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ RedrawStatic (unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_RedrawStatic: near

.segment	"CODE"

	lda     #$FF
	sta     _ActiveFrame
	sta     _ActiveFrame+1
	lda     #$00
	jsr     _bordercolor
	lda     #$00
	jsr     _bgcolor
	jsr     _clrscr
	lda     #$00
	jsr     _cursor
	lda     #$0F
	jsr     _textcolor
	jsr     _DrawFrames
	jsr     _HelpPrompt
	jsr     decsp3
	ldy     #$03
	lda     (sp),y
	ldy     #$01
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	tay
	sta     (sp),y
	jsr     _ActivateFrame
	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; void __near__ Redraw (unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_Redraw: near

.segment	"CODE"

	ldy     #$00
	lda     (sp),y
	jsr     pusha
	jsr     _RedrawStatic
	jsr     _UpdateAsm
	jsr     _UpdateReg
	jsr     _UpdateStack
	jsr     _UpdateCStack
	jsr     _UpdateDump
	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ GetKeyUpdate (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_GetKeyUpdate: near

.segment	"BSS"

L04C5:
	.res	1,$00

.segment	"CODE"

	jmp     L04C8
L0546:	lda     L04C5
	beq     L04CE
	cmp     #$01
	beq     L04D1
	cmp     #$02
	beq     L04D4
	cmp     #$03
	beq     L04D7
	jmp     L0547
L04CE:	jsr     _UpdateAsm
	jmp     L0547
L04D1:	jsr     _UpdateStack
	jmp     L0547
L04D4:	jsr     _UpdateCStack
	jmp     L0547
L04D7:	jsr     _UpdateDump
L0547:	lda     L04C5
	clc
	adc     #$01
	and     #$03
	sta     L04C5
L04C8:	jsr     _kbhit
	tax
	beq     L0546
	jmp     _cgetc

.endproc

; ---------------------------------------------------------------
; void __near__ DrawFrame (register __near__ struct $anon-struct-0008*, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_DrawFrame: near

.segment	"CODE"

	ldy     #$01
	ldx     #$04
	jsr     regswap2
	ldy     #$0B
	jsr     subysp
	ldy     #$0B
	lda     (sp),y
	beq     L00CF
	lda     #$01
	jsr     _textcolor
	ldy     #$00
	sta     (sp),y
	lda     #$14
	ldy     #$07
	sta     (sp),y
	lda     #$12
	dey
	sta     (sp),y
	lda     #$11
	dey
	sta     (sp),y
	lda     #$08
	jmp     L0549
L00CF:	lda     #$0F
	jsr     _textcolor
	ldy     #$00
	sta     (sp),y
	lda     (regbank+4),y
	ldy     #$07
	sta     (sp),y
	ldy     #$01
	lda     (regbank+4),y
	ldy     #$06
	sta     (sp),y
	ldy     #$02
	lda     (regbank+4),y
	ldy     #$05
	sta     (sp),y
	ldy     #$03
	lda     (regbank+4),y
L0549:	ldy     #$04
	sta     (sp),y
	lda     (regbank+4),y
	dey
	sta     (sp),y
	ldy     #$05
	lda     (regbank+4),y
	ldy     #$02
	sta     (sp),y
	ldy     #$08
	lda     (regbank+4),y
	ldy     #$01
	sta     (sp),y
	jsr     decsp2
	ldy     #$05
	lda     (sp),y
	ldy     #$01
	sta     (sp),y
	ldy     #$04
	lda     (sp),y
	ldy     #$00
	sta     (sp),y
	ldy     #$09
	lda     (sp),y
	jsr     _cputcxy
	ldy     #$01
	lda     (sp),y
	jsr     _chline
	ldy     #$06
	lda     (sp),y
	jsr     _cputc
	jsr     decsp2
	ldy     #$05
	lda     (sp),y
	ldy     #$01
	sta     (sp),y
	ldy     #$04
	clc
	lda     #$01
	adc     (sp),y
	sta     (sp),y
	ldy     #$00
	sta     (sp),y
	ldy     #$09
	lda     (regbank+4),y
	jsr     _cvlinexy
	ldy     #$05
	lda     (sp),y
	jsr     _cputc
	ldy     #$01
	lda     (sp),y
	jsr     _chline
	ldy     #$04
	lda     (sp),y
	jsr     _cputc
	jsr     decsp2
	ldy     #$06
	lda     (regbank+4),y
	ldy     #$01
	sta     (sp),y
	ldy     #$04
	lda     (sp),y
	ldy     #$00
	sta     (sp),y
	ldy     #$09
	lda     (regbank+4),y
	jsr     _cvlinexy
	lda     #$0F
	jsr     _textcolor
	ldy     #$0D
	lda     (regbank+4),y
	ldy     #$08
	sta     (sp),y
	ldy     #$0F
	lda     (regbank+4),y
	tax
	dey
	lda     (regbank+4),y
	ldy     #$09
	jsr     staxysp
	jmp     L010C
L010A:	jsr     decsp2
	ldy     #$05
	lda     (sp),y
	jsr     pusha0
	ldy     #$0E
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	lda     (ptr1,x)
	jsr     tosadda0
	ldy     #$01
	sta     (sp),y
	ldy     #$04
	lda     (sp),y
	jsr     pusha0
	ldy     #$0E
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$01
	lda     (ptr1),y
	jsr     tosadda0
	ldy     #$00
	sta     (sp),y
	ldy     #$0C
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$03
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _cputsxy
	ldy     #$09
	ldx     #$00
	lda     #$04
	jsr     addeqysp
L010C:	ldy     #$08
	lda     (sp),y
	pha
	sec
	sbc     #$01
	sta     (sp),y
	pla
	tax
	bne     L010A
	lda     (sp,x)
	jsr     _textcolor
	ldy     #$0C
	lda     (sp),y
	sta     regbank+4
	iny
	lda     (sp),y
	sta     regbank+5
	iny
	jmp     addysp

.endproc

; ---------------------------------------------------------------
; void __near__ DrawFrames (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_DrawFrames: near

.segment	"CODE"

	jsr     decsp3
	lda     #$00
	ldy     #$02
L054B:	sta     (sp),y
	cmp     #$06
	bcs     L0117
	ldx     #$00
	lda     (sp),y
	asl     a
	bcc     L054C
	inx
	clc
L054C:	adc     #<(_Frames)
	sta     ptr1
	txa
	adc     #>(_Frames)
	sta     ptr1+1
	dey
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     stax0sp
	sta     ptr1
	stx     ptr1+1
	ldy     #$0A
	lda     (ptr1),y
	beq     L0118
	jsr     decsp3
	ldy     #$04
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	ldy     #$01
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	lda     #$00
	tay
	sta     (sp),y
	jsr     _DrawFrame
L0118:	ldy     #$02
	clc
	lda     #$01
	adc     (sp),y
	jmp     L054B
L0117:	jmp     incsp3

.endproc

; ---------------------------------------------------------------
; void __near__ ActivateFrame (int, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_ActivateFrame: near

.segment	"CODE"

	jsr     decsp1
	lda     regbank+4
	ldx     regbank+5
	jsr     pushax
	ldy     #$05
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	cpx     _ActiveFrame+1
	bne     L054F
	cmp     _ActiveFrame
	jeq     L012A
L054F:	ldx     _ActiveFrame+1
	bmi     L012C
	jsr     decsp3
	lda     _ActiveFrame
	ldx     _ActiveFrame+1
	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_Frames)
	sta     ptr1
	lda     tmp1
	adc     #>(_Frames)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	iny
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	lda     #$00
	tay
	sta     (sp),y
	jsr     _DrawFrame
L012C:	ldy     #$05
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	sta     _ActiveFrame
	stx     _ActiveFrame+1
	txa
	jmi     L0132
	lda     _ActiveFrame
	ldx     _ActiveFrame+1
	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_Frames)
	sta     ptr1
	lda     tmp1
	adc     #>(_Frames)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	sta     regbank+4
	stx     regbank+4+1
	ldy     #$03
	lda     (sp),y
	beq     L013C
	ldy     #$05
	lda     (regbank+4),y
	clc
	adc     #$01
	ldy     #$02
L054E:	sta     (sp),y
	lda     (sp),y
	jsr     pusha0
	ldy     #$07
	lda     (regbank+4),y
	jsr     tosicmp0
	bcs     L013C
	jsr     decsp2
	ldy     #$04
	lda     (regbank+4),y
	clc
	adc     #$01
	ldy     #$01
	sta     (sp),y
	ldy     #$04
	lda     (sp),y
	ldy     #$00
	sta     (sp),y
	ldy     #$08
	lda     (regbank+4),y
	jsr     _cclearxy
	ldy     #$02
	clc
	lda     #$01
	adc     (sp),y
	jmp     L054E
L013C:	jsr     decsp3
	lda     regbank+4
	ldy     #$01
	sta     (sp),y
	iny
	lda     regbank+4+1
	sta     (sp),y
	lda     #$01
	ldy     #$00
	sta     (sp),y
	jsr     _DrawFrame
L0132:	lda     _ActivePrompt
	ldx     _ActivePrompt+1
	jsr     pushax
	jsr     _DisplayPrompt
L012A:	ldy     #$00
	lda     (sp),y
	sta     regbank+4
	iny
	lda     (sp),y
	sta     regbank+5
	jmp     incsp6

.endproc

; ---------------------------------------------------------------
; void __near__ HelpPrompt (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_HelpPrompt: near

.segment	"CODE"

	lda     #<(L016D)
	ldx     #>(L016D)
	jsr     pushax
	jmp     _DisplayPrompt

.endproc

; ---------------------------------------------------------------
; void __near__ AnyKeyPrompt (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_AnyKeyPrompt: near

.segment	"CODE"

	lda     #<(L0171)
	ldx     #>(L0171)
	jsr     pushax
	jmp     _DisplayPrompt

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ IsAbortKey (unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_IsAbortKey: near

.segment	"CODE"

	ldx     #$00
	lda     (sp,x)
	cmp     #$08
	bne     L0550
	lda     #$01
	jmp     incsp1
L0550:	txa
	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ Input (__near__ unsigned char*, __near__ unsigned char*, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_Input: near

.segment	"CODE"

	ldy     #$0A
	jsr     subysp
	lda     #$00
	ldy     #$01
	sta     (sp),y
	lda     #$18
	dey
	sta     (sp),y
	lda     #$28
	jsr     _cclearxy
	lda     #$01
	jsr     _textcolor
	ldy     #$05
	sta     (sp),y
	jsr     decsp2
	lda     #$00
	ldy     #$01
	sta     (sp),y
	lda     #$18
	dey
	sta     (sp),y
	ldy     #$0E
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     _cputsxy
	lda     #$0F
	jsr     _textcolor
	jsr     _wherex
	ldy     #$03
	sta     (sp),y
	lda     #$01
	jsr     _cursor
	ldy     #$04
	sta     (sp),y
	lda     #$00
	ldy     #$01
	sta     (sp),y
	iny
	sta     (sp),y
L018E:	jsr     _cgetc
	ldy     #$00
	sta     (sp),y
	tay
	lda     __ctype,y
	and     #$07
	beq     L0193
	ldy     #$02
	ldx     #$00
	lda     (sp),y
	ldy     #$08
	cmp     (sp),y
	bcs     L0193
	ldy     #$02
	lda     (sp),y
	clc
	ldy     #$09
	adc     (sp),y
	sta     ptr1
	txa
	iny
	adc     (sp),y
	sta     ptr1+1
	ldy     #$00
	lda     (sp),y
	sta     (ptr1),y
	jsr     decsp2
	ldy     #$04
	lda     (sp),y
	clc
	iny
	adc     (sp),y
	ldy     #$01
	sta     (sp),y
	lda     #$18
	dey
	sta     (sp),y
	ldy     #$02
	lda     (sp),y
	jsr     _cputcxy
	ldy     #$02
	clc
	lda     #$01
	adc     (sp),y
	jmp     L0554
L0193:	ldy     #$02
	lda     (sp),y
	beq     L01AC
	ldy     #$00
	lda     (sp),y
	cmp     #$14
	bne     L055D
	ldy     #$02
	lda     (sp),y
	sec
	sbc     #$01
	sta     (sp),y
	jsr     decsp2
	ldy     #$04
	lda     (sp),y
	clc
	iny
	adc     (sp),y
	ldy     #$01
	sta     (sp),y
	lda     #$18
	dey
	sta     (sp),y
	lda     #$20
	jsr     _cputcxy
	ldy     #$02
	lda     (sp),y
	clc
	iny
	adc     (sp),y
	jsr     pusha
	lda     #$18
	jsr     _gotoxy
	jmp     L01C1
L01AC:	tay
L055D:	lda     (sp),y
	cmp     #$0A
	bne     L055B
	ldy     #$02
	lda     (sp),y
	clc
	ldy     #$09
	adc     (sp),y
	sta     ptr1
	lda     #$00
	iny
	adc     (sp),y
	sta     ptr1+1
	lda     #$00
	tay
	sta     (ptr1),y
	lda     #$01
	jmp     L055C
L055B:	lda     (sp),y
	jsr     pusha
	jsr     _IsAbortKey
	tax
	beq     L01C1
	lda     #$02
L055C:	ldy     #$01
L0554:	sta     (sp),y
L01C1:	ldy     #$01
	lda     (sp),y
	jeq     L018E
	ldy     #$04
	lda     (sp),y
	jsr     _cursor
	ldy     #$05
	lda     (sp),y
	jsr     _textcolor
	jsr     _DrawFrames
	lda     _ActiveFrame
	ldx     _ActiveFrame+1
	ldy     #$06
	jsr     staxysp
	lda     #$FF
	sta     _ActiveFrame
	sta     _ActiveFrame+1
	jsr     decsp3
	ldy     #$0A
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	ldy     #$01
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	lda     #$00
	tay
	sta     (sp),y
	jsr     _ActivateFrame
	ldy     #$01
	lda     (sp),y
	cmp     #$01
	jsr     booleq
	ldy     #$0D
	jmp     addysp

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ InputHex (__near__ unsigned char*, __near__ unsigned int*)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_InputHex: near

.segment	"CODE"

	ldy     #$0F
	jsr     subysp
	ldy     #$12
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	ldy     #$03
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	lda     sp
	ldx     sp+1
	clc
	adc     #$0A
	bcc     L01DB
	inx
L01DB:	ldy     #$01
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	lda     #$04
	ldy     #$00
	sta     (sp),y
	jsr     _Input
	tax
	jeq     L0222
	ldy     #$05
	lda     (sp),y
	tay
	lda     __ctype,y
	and     #$08
	bne     L0562
	tax
	jmp     L0222
L0562:	lda     sp
	ldx     sp+1
	clc
	adc     #$05
	bcc     L01EF
	inx
L01EF:	ldy     #$03
	jsr     staxysp
	ldy     #$00
	tya
	sta     (sp),y
	iny
	sta     (sp),y
	jmp     L01F4
L01F2:	ldy     #$01
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     shlax4
	jsr     stax0sp
	ldy     #$02
	lda     (sp),y
	tay
	lda     __ctype,y
	and     #$04
	beq     L0207
	ldy     #$02
	lda     (sp),y
	sec
	sbc     #$30
	jmp     L055F
L0207:	ldy     #$02
	lda     (sp),y
	ldx     #$00
	jsr     _toupper
	sec
	sbc     #$37
	ldy     #$02
L055F:	sta     (sp),y
	ldx     #$00
	jsr     addeq0sp
	ldy     #$03
	ldx     #$00
	lda     #$01
	jsr     addeqysp
L01F4:	ldy     #$04
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$00
	lda     (ptr1),y
	ldy     #$02
	sta     (sp),y
	tax
	beq     L055E
	lda     (sp),y
	tay
	lda     __ctype,y
	and     #$08
	bne     L01F2
L055E:	ldy     #$0B
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$01
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	sta     (ptr1),y
	iny
	txa
	sta     (ptr1),y
	ldx     #$00
	tya
L0222:	ldy     #$0E
	jmp     addysp

.endproc

; ---------------------------------------------------------------
; void __near__ ErrorPrompt (__near__ unsigned char*)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_ErrorPrompt: near

.segment	"CODE"

	lda     _ActivePrompt
	ldx     _ActivePrompt+1
	jsr     pushax
	ldy     #$05
	jsr     pushwysp
	jsr     _DisplayPrompt
	jsr     _cgetc
	jsr     pushw0sp
	jsr     _DisplayPrompt
	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ InputGoto (__near__ unsigned int*)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_InputGoto: near

.segment	"CODE"

	jsr     decsp5
	lda     #<(L022E)
	ldy     #$02
	sta     (sp),y
	iny
	lda     #>(L022E)
	sta     (sp),y
	ldy     #$06
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	ldy     #$00
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	jsr     _InputHex
	ldy     #$00
	sta     (sp),y
	lda     (sp),y
	bne     L0567
	lda     #<(L0234)
	ldx     #>(L0234)
	jsr     pushax
	jsr     _ErrorPrompt
L0567:	ldx     #$00
	lda     (sp,x)
	jmp     incsp3

.endproc

; ---------------------------------------------------------------
; void __near__ BreakInRomError (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_BreakInRomError: near

.segment	"CODE"

	lda     #<(L0239)
	ldx     #>(L0239)
	jsr     pushax
	jmp     _ErrorPrompt

.endproc

; ---------------------------------------------------------------
; void __near__ DbgSetTmpBreak (unsigned int)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_DbgSetTmpBreak: near

.segment	"CODE"

	jsr     _DbgGetBreakSlot
	jsr     pushax
	ldy     #$01
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$03
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	ldy     #$00
	sta     (ptr1),y
	iny
	txa
	sta     (ptr1),y
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	lda     #$80
	ldy     #$03
	sta     (ptr1),y
	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; void __near__ DbgToggleUserBreak (unsigned int)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_DbgToggleUserBreak: near

.segment	"CODE"

	lda     regbank+4
	ldx     regbank+5
	jsr     pushax
	ldy     #$05
	jsr     pushwysp
	jsr     _DbgIsBreak
	sta     regbank+4
	stx     regbank+4+1
	lda     regbank+4
	ora     regbank+4+1
	beq     L0244
	lda     #$00
	ldy     #$03
	sta     (regbank+4),y
	dec     _DbgBreakCount
	jmp     L0254
L0244:	lda     _DbgBreakCount
	cmp     #$0A
	bcc     L024A
	lda     #<(L024D)
	ldx     #>(L024D)
	jsr     pushax
	jsr     _ErrorPrompt
	jmp     L0254
L024A:	ldy     #$03
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     _DbgIsRAM
	stx     tmp1
	ora     tmp1
	bne     L0250
	jsr     _BreakInRomError
	jmp     L0254
L0250:	jsr     _DbgGetBreakSlot
	sta     regbank+4
	stx     regbank+4+1
	sta     ptr1
	stx     ptr1+1
	ldy     #$03
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	ldy     #$00
	sta     (ptr1),y
	iny
	txa
	sta     (ptr1),y
	tya
	ldy     #$03
	sta     (regbank+4),y
	inc     _DbgBreakCount
L0254:	ldy     #$00
	lda     (sp),y
	sta     regbank+4
	iny
	lda     (sp),y
	sta     regbank+5
	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; void __near__ DbgResetTmpBreaks (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_DbgResetTmpBreaks: near

.segment	"CODE"

	jsr     decsp1
	lda     #<(_DbgBreaks)
	ldx     #>(_DbgBreaks)
	jsr     pushax
	lda     #$00
	ldy     #$02
L0569:	sta     (sp),y
	cmp     #$0A
	bcs     L025F
	dey
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$03
	lda     (ptr1),y
	cmp     #$80
	bne     L0266
	ldy     #$01
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	tya
	ldy     #$03
	sta     (ptr1),y
L0266:	ldx     #$00
	lda     #$04
	jsr     addeq0sp
	ldy     #$02
	clc
	lda     #$01
	adc     (sp),y
	jmp     L0569
L025F:	jmp     incsp3

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ DbgTmpBreaksOk (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_DbgTmpBreaksOk: near

.segment	"CODE"

	jsr     decsp1
	lda     #<(_DbgBreaks)
	ldx     #>(_DbgBreaks)
	jsr     pushax
	lda     #$00
	ldy     #$02
L056A:	sta     (sp),y
	ldx     #$00
	lda     (sp),y
	cmp     #$0A
	bcs     L056C
	dey
	lda     (sp),y
	sta     ptr1+1
	lda     (sp,x)
	sta     ptr1
	ldy     #$03
	lda     (ptr1),y
	cmp     #$80
	bne     L0275
	ldy     #$01
	lda     (sp),y
	sta     ptr1+1
	lda     (sp,x)
	sta     ptr1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _DbgIsRAM
	stx     tmp1
	ora     tmp1
	bne     L0275
	jsr     _BreakInRomError
	jsr     _DbgResetTmpBreaks
	ldx     #$00
	txa
	jmp     incsp3
L0275:	ldx     #$00
	lda     #$04
	jsr     addeq0sp
	ldy     #$02
	clc
	lda     #$01
	adc     (sp),y
	jmp     L056A
L056C:	lda     #$01
	jmp     incsp3

.endproc

; ---------------------------------------------------------------
; unsigned int __near__ AsmBack (unsigned int, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_AsmBack: near

.segment	"CODE"

	ldy     #$43
	jsr     subysp
	lda     #$06
	jsr     pusha0
L0282:	lda     #$00
	ldy     #$02
	sta     (sp),y
	ldy     #$49
	jsr     pushwysp
	ldy     #$47
	ldx     #$00
	lda     (sp),y
	jsr     mulax3
	jsr     tossubax
	sec
	ldy     #$00
	sbc     (sp),y
	pha
	txa
	iny
	sbc     (sp),y
	tax
	pla
	ldy     #$43
	jsr     staxysp
L028B:	ldy     #$44
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     _DbgDisAsmLen
	ldy     #$43
	jsr     addeqysp
	ldy     #$02
	ldx     #$00
	lda     (sp),y
	asl     a
	bcc     L0570
	inx
	clc
L0570:	adc     #$03
	bcc     L0294
	inx
	clc
L0294:	adc     sp
	sta     ptr1
	txa
	adc     sp+1
	sta     ptr1+1
	ldy     #$44
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	ldy     #$00
	sta     (ptr1),y
	iny
	txa
	sta     (ptr1),y
	iny
	lda     (sp),y
	clc
	adc     #$01
	and     #$1F
	sta     (sp),y
	ldy     #$44
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	ldy     #$46
	cmp     (sp),y
	txa
	iny
	sbc     (sp),y
	bcc     L028B
	ldy     #$44
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	ldy     #$46
	cmp     (sp),y
	bne     L0572
	txa
	iny
	cmp     (sp),y
	beq     L029D
L0572:	ldy     #$01
	lda     (sp),y
	bne     L0574
	dey
	lda     (sp),y
	cmp     #$0C
	bne     L0574
L029D:	ldy     #$02
	ldx     #$00
	lda     (sp),y
	sec
	ldy     #$45
	sbc     (sp),y
	sec
	sbc     #$01
	and     #$1F
	asl     a
	bcc     L0571
	inx
	clc
L0571:	adc     #$03
	bcc     L02A4
	inx
	clc
L02A4:	adc     sp
	sta     ptr1
	txa
	adc     sp+1
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jmp     L0283
L0574:	ldx     #$00
	lda     #$01
	jsr     addeq0sp
	jmp     L0282
L0283:	ldy     #$48
	jmp     addysp

.endproc

; ---------------------------------------------------------------
; unsigned int __near__ UpdateAsm (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_UpdateAsm: near

.segment	"CODE"

	ldy     #$2A
	jsr     subysp
	lda     _AsmFrame+8
	jsr     pusha
	lda     _AsmFrame+4
	clc
	adc     #$01
	jsr     pusha
	jsr     decsp3
	lda     _AsmAddr
	ldy     #$01
	sta     (sp),y
	iny
	lda     _AsmAddr+1
	sta     (sp),y
	tya
	ldy     #$00
	sta     (sp),y
	jsr     _AsmBack
	jsr     pushax
	lda     _AsmFrame+5
	clc
	adc     #$01
	ldy     #$04
L0577:	sta     (sp),y
	cmp     _AsmFrame+7
	jcs     L02B0
	jsr     decsp4
	iny
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	ldy     #$02
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	lda     sp
	ldx     sp+1
	clc
	adc     #$0A
	bcc     L02BC
	inx
L02BC:	ldy     #$00
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	ldy     #$07
	lda     (sp),y
	jsr     _DbgDisAsm
	ldy     #$05
	sta     (sp),y
	ldy     #$01
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	cpx     _brk_pc+1
	bne     L02BE
	cmp     _brk_pc
	bne     L02BE
	lda     #$2D
	ldy     #$0A
	sta     (sp),y
	lda     #$3E
	iny
	sta     (sp),y
L02BE:	jsr     pushw0sp
	jsr     _DbgIsBreak
	stx     tmp1
	ora     tmp1
	beq     L02C8
	lda     #$2A
	ldy     #$0B
	sta     (sp),y
L02C8:	ldy     #$01
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	cpx     _AsmAddr+1
	bne     L02CF
	cmp     _AsmAddr
	bne     L02CF
	lda     #$01
	jsr     _revers
	jsr     decsp2
	lda     #$01
	tay
	sta     (sp),y
	ldy     #$06
	lda     (sp),y
	ldy     #$00
	sta     (sp),y
	lda     sp
	ldx     sp+1
	clc
	adc     #$08
	bcc     L02D7
	inx
L02D7:	jsr     _cputsxy
	lda     #$00
	jsr     _revers
	jmp     L02DA
L02CF:	jsr     decsp2
	lda     #$01
	iny
	sta     (sp),y
	ldy     #$06
	lda     (sp),y
	ldy     #$00
	sta     (sp),y
	lda     sp
	ldx     sp+1
	clc
	adc     #$08
	bcc     L02DF
	inx
L02DF:	jsr     _cputsxy
L02DA:	ldy     #$05
	lda     (sp),y
	ldx     #$00
	jsr     addeq0sp
	ldy     #$04
	clc
	lda     #$01
	adc     (sp),y
	jmp     L0577
L02B0:	ldy     #$01
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	ldy     #$2E
	jmp     addysp

.endproc

; ---------------------------------------------------------------
; unsigned int __near__ AsmArg16 (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_AsmArg16: near

.segment	"CODE"

	lda     _AsmAddr
	ldx     _AsmAddr+1
	clc
	adc     #$01
	bcc     L02E6
	inx
L02E6:	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ AsmFollow (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_AsmFollow: near

.segment	"CODE"

	lda     _AsmAddr
	sta     ptr1
	lda     _AsmAddr+1
	sta     ptr1+1
	ldx     #$00
	lda     (ptr1,x)
	cmp     #$10
	beq     L02F6
	cmp     #$20
	beq     L02EC
	cmp     #$30
	beq     L02F6
	cmp     #$40
	beq     L057A
	cmp     #$4C
	beq     L02EC
	cmp     #$50
	beq     L02F6
	cmp     #$60
	beq     L0579
	cmp     #$6C
	beq     L02F2
	cmp     #$70
	beq     L02F6
	cmp     #$90
	beq     L02F6
	cmp     #$B0
	beq     L02F6
	cmp     #$D0
	beq     L02F6
	cmp     #$F0
	beq     L02F6
	rts
L02EC:	jsr     _AsmArg16
	jmp     L057B
L02F2:	jsr     _AsmArg16
	jmp     L0582
L02F6:	lda     _AsmAddr
	ldx     _AsmAddr+1
	clc
	adc     #$02
	bcc     L0307
	inx
L0307:	jsr     pushax
	lda     _AsmAddr
	ldx     _AsmAddr+1
	clc
	adc     #$01
	bcc     L0309
	inx
L0309:	ldy     #$00
	jsr     ldaidx
	jsr     tosaddax
	jmp     L057B
L0579:	lda     _DbgSP
	clc
	adc     #$01
	bcc     L0310
	inx
L0310:	inx
	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	clc
	adc     #$01
	bcc     L057B
	inx
	jmp     L057B
L057A:	lda     _DbgSP
	clc
	adc     #$02
	bcc     L0317
	inx
L0317:	inx
L0582:	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
L057B:	sta     _AsmAddr
	stx     _AsmAddr+1
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ AsmHome (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_AsmHome: near

.segment	"CODE"

	lda     _brk_pc
	sta     _AsmAddr
	lda     _brk_pc+1
	sta     _AsmAddr+1
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ InitAsm (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_InitAsm: near

.segment	"CODE"

	jsr     _AsmHome
	jmp     _UpdateAsm

.endproc

; ---------------------------------------------------------------
; unsigned int __near__ UpdateReg (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_UpdateReg: near

.segment	"CODE"

	lda     _RegFrame+4
	clc
	adc     #$05
	jsr     pusha
	ldy     #$00
	lda     (sp),y
	clc
	adc     #$02
	jsr     pusha
	lda     _RegFrame+5
	jsr     pusha
	ldy     #$02
	lda     (sp),y
	jsr     pusha
	ldy     #$01
	clc
	tya
	adc     (sp),y
	sta     (sp),y
	jsr     _gotoxy
	lda     _brk_pc
	ldx     _brk_pc+1
	jsr     _cputhex16
	ldy     #$01
	lda     (sp),y
	jsr     pusha
	ldy     #$01
	clc
	tya
	adc     (sp),y
	sta     (sp),y
	jsr     _gotoxy
	lda     _brk_sr
	jsr     _cputhex8
	ldy     #$01
	lda     (sp),y
	jsr     pusha
	ldy     #$01
	clc
	tya
	adc     (sp),y
	sta     (sp),y
	jsr     _gotoxy
	lda     _brk_a
	jsr     _cputhex8
	ldy     #$01
	lda     (sp),y
	jsr     pusha
	ldy     #$01
	clc
	tya
	adc     (sp),y
	sta     (sp),y
	jsr     _gotoxy
	lda     _brk_x
	jsr     _cputhex8
	ldy     #$01
	lda     (sp),y
	jsr     pusha
	ldy     #$01
	clc
	tya
	adc     (sp),y
	sta     (sp),y
	jsr     _gotoxy
	lda     _brk_y
	jsr     _cputhex8
	ldy     #$01
	lda     (sp),y
	jsr     pusha
	ldy     #$01
	clc
	tya
	adc     (sp),y
	sta     (sp),y
	jsr     _gotoxy
	lda     _DbgSP
	jsr     _cputhex8
	ldy     #$02
	lda     (sp),y
	jsr     pusha
	ldy     #$01
	clc
	tya
	adc     (sp),y
	sta     (sp),y
	jsr     _gotoxy
	lda     _DbgCS
	ldx     _DbgCS+1
	jsr     _cputhex16
	ldy     #$02
	lda     (sp),y
	jsr     pusha
	ldy     #$01
	clc
	tya
	adc     (sp),y
	sta     (sp),y
	jsr     _gotoxy
	lda     _DbgHI
	ldx     _DbgHI+1
	jsr     _cputhex16
	ldx     #$00
	txa
	jmp     incsp3

.endproc

; ---------------------------------------------------------------
; void __near__ InitReg (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_InitReg: near

.segment	"CODE"

	jmp     _UpdateReg

.endproc

; ---------------------------------------------------------------
; unsigned int __near__ UpdateStack (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_UpdateStack: near

.segment	"CODE"

	lda     _StackAddr
	jsr     pusha
	lda     _StackFrame+4
	clc
	adc     #$01
	jsr     pusha
	ldy     #$00
	lda     (sp),y
	clc
	adc     #$06
	jsr     pusha
	jsr     decsp1
	lda     _StackFrame+7
	sec
	sbc     #$01
	ldy     #$00
L0584:	sta     (sp),y
	ldx     #$00
	lda     (sp),y
	sec
	sbc     _StackFrame+5
	sta     tmp1
	lda     tmp1
	beq     L0390
	bcc     L0390
	ldy     #$02
	lda     (sp),y
	jsr     pusha
	ldy     #$01
	lda     (sp),y
	jsr     _gotoxy
	ldy     #$03
	lda     (sp),y
	jsr     _cputhex8
	ldy     #$01
	lda     (sp),y
	jsr     pusha
	ldy     #$01
	lda     (sp),y
	jsr     _gotoxy
	ldy     #$03
	lda     (sp),y
	sta     ptr1
	lda     #$01
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	jsr     _cputhex8
	ldy     #$03
	clc
	lda     #$01
	adc     (sp),y
	sta     (sp),y
	ldy     #$00
	lda     (sp),y
	sec
	sbc     #$01
	jmp     L0584
L0390:	ldy     #$03
	lda     (sp),y
	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; void __near__ StackHome (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_StackHome: near

.segment	"CODE"

	lda     _DbgSP
	clc
	adc     #$01
	sta     _StackAddr
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ InitStack (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_InitStack: near

.segment	"CODE"

	jsr     _StackHome
	jmp     _UpdateStack

.endproc

; ---------------------------------------------------------------
; unsigned int __near__ UpdateCStack (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_UpdateCStack: near

.segment	"CODE"

	lda     _CStackAddr
	ldx     _CStackAddr+1
	jsr     pushax
	lda     _CStackFrame+4
	clc
	adc     #$05
	jsr     pusha
	jsr     decsp1
	lda     _CStackFrame+7
	sec
	sbc     #$01
	ldy     #$00
L0586:	sta     (sp),y
	sec
	sbc     _CStackFrame+5
	sta     tmp1
	lda     tmp1
	beq     L03D3
	bcc     L03D3
	iny
	lda     (sp),y
	jsr     pusha
	ldy     #$01
	lda     (sp),y
	jsr     _gotoxy
	ldy     #$03
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	dey
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _cputhex16
	ldy     #$02
	ldx     #$00
	tya
	jsr     addeqysp
	ldy     #$00
	lda     (sp),y
	sec
	sbc     #$01
	jmp     L0586
L03D3:	jsr     decsp2
	lda     _CStackFrame+4
	clc
	adc     #$01
	iny
	sta     (sp),y
	lda     _CStackFrame+7
	sec
	sbc     #$01
	dey
	sta     (sp),y
	lda     #<(L03E6)
	ldx     #>(L03E6)
	jsr     _cputsxy
	ldy     #$03
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; void __near__ CStackHome (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_CStackHome: near

.segment	"CODE"

	lda     _DbgCS
	sta     _CStackAddr
	lda     _DbgCS+1
	sta     _CStackAddr+1
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ InitCStack (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_InitCStack: near

.segment	"CODE"

	jsr     _CStackHome
	jmp     _UpdateCStack

.endproc

; ---------------------------------------------------------------
; unsigned int __near__ UpdateDump (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_UpdateDump: near

.segment	"CODE"

	ldy     #$29
	jsr     subysp
	lda     _DumpAddr
	ldx     _DumpAddr+1
	jsr     pushax
	lda     _DumpFrame+4
	clc
	adc     #$01
	jsr     pusha
	ldy     #$04
	jsr     pushwysp
	lda     _DumpFrame+5
	clc
	adc     #$01
	ldy     #$05
L0587:	sta     (sp),y
	cmp     _DumpFrame+7
	bcs     L041D
	jsr     decsp2
	dey
	lda     (sp),y
	ldy     #$01
	sta     (sp),y
	ldy     #$07
	lda     (sp),y
	ldy     #$00
	sta     (sp),y
	jsr     decsp5
	ldy     #$0B
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	ldy     #$03
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	lda     sp
	ldx     sp+1
	clc
	adc     #$0D
	bcc     L042B
	inx
L042B:	ldy     #$01
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	lda     #$08
	ldy     #$00
	sta     (sp),y
	jsr     _DbgMemDump
	jsr     _cputsxy
	ldy     #$03
	ldx     #$00
	lda     #$08
	jsr     addeqysp
	ldy     #$05
	clc
	lda     #$01
	adc     (sp),y
	jmp     L0587
L041D:	dey
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	ldy     #$2E
	jmp     addysp

.endproc

; ---------------------------------------------------------------
; void __near__ DumpHome (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_DumpHome: near

.segment	"CODE"

	lda     #$00
	sta     _DumpAddr
	sta     _DumpAddr+1
	rts

.endproc

; ---------------------------------------------------------------
; unsigned int __near__ GetArg16 (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_GetArg16: near

.segment	"CODE"

	lda     _brk_pc
	ldx     _brk_pc+1
	clc
	adc     #$01
	bcc     L046A
	inx
L046A:	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	rts

.endproc

; ---------------------------------------------------------------
; unsigned int __near__ GetStack16 (unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_GetStack16: near

.segment	"CODE"

	ldx     #$00
	lda     (sp,x)
	clc
	adc     _DbgSP
	bcc     L0589
	inx
	clc
L0589:	adc     #$01
	bcc     L046E
	inx
L046E:	inx
	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; void __near__ SetRTSBreak (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_SetRTSBreak: near

.segment	"CODE"

	lda     #$00
	jsr     pusha
	jsr     _GetStack16
	clc
	adc     #$01
	bcc     L0473
	inx
L0473:	jsr     pushax
	jmp     _DbgSetTmpBreak

.endproc

; ---------------------------------------------------------------
; void __near__ DbgEntry (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_DbgEntry: near

.segment	"DATA"

L04DF:
	.byte	$01

.segment	"CODE"

	jsr     decsp2
	lda     L04DF
	beq     L04E1
	lda     #$00
	sta     L04DF
	jsr     pusha
	jsr     _RedrawStatic
	jsr     _InitAsm
	jsr     _InitReg
	jsr     _InitStack
	jsr     _InitCStack
	jsr     _UpdateDump
L04E1:	jsr     _AsmHome
	jsr     _UpdateReg
	jsr     _StackHome
	jsr     _CStackHome
	lda     #$00
	tay
	sta     (sp),y
	jmp     L058C
L04F2:	lda     _ActiveFrame
	ldx     _ActiveFrame+1
	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_Frames)
	sta     ptr1
	lda     tmp1
	adc     #>(_Frames)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	sta     ptr1
	stx     ptr1+1
	ldy     #$0C
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     callax
	ldy     #$01
	sta     (sp),y
	lda     (sp),y
	jeq     L058B
	cmp     #$0A
	jeq     L0523
	cmp     #$20
	jeq     L051B
	cmp     #$31
	beq     L04FD
	cmp     #$32
	beq     L04FD
	cmp     #$33
	beq     L04FD
	cmp     #$34
	beq     L04FD
	cmp     #$35
	beq     L04FD
	cmp     #$3F
	beq     L050B
	cmp     #$63
	jeq     L058B
	cmp     #$68
	beq     L0513
	cmp     #$71
	jeq     L053B
	cmp     #$72
	jeq     L0537
	cmp     #$73
	jeq     L0531
	cmp     #$75
	beq     L050E
	jmp     L04F4
L04FD:	jsr     decsp3
	ldy     #$04
	ldx     #$00
	lda     (sp),y
	sec
	sbc     #$31
	bcs     L0508
	dex
L0508:	ldy     #$01
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	lda     #$00
	tay
	sta     (sp),y
	jsr     _ActivateFrame
	jmp     L04F4
L050B:	jsr     _HelpHandler
	jmp     L04F4
L050E:	jsr     _SetRTSBreak
	lda     #$01
	ldy     #$00
	sta     (sp),y
	jmp     L058C
L0513:	lda     _brk_pc
	ldx     _brk_pc+1
	cpx     _AsmAddr+1
	bne     L058D
	cmp     _AsmAddr
	beq     L04F4
L058D:	lda     _AsmAddr
	ldx     _AsmAddr+1
	jsr     pushax
	jsr     _DbgSetTmpBreak
	lda     #$01
	ldy     #$00
	sta     (sp),y
	jmp     L058C
L051B:	tya
	jsr     pusha
	jsr     _SingleStep
	jsr     _DbgTmpBreaksOk
	tax
	beq     L04F4
	lda     #$01
	ldy     #$00
	sta     (sp),y
	jmp     L058C
L0523:	lda     #$00
	jsr     pusha
	jsr     _SingleStep
	jsr     _DbgTmpBreaksOk
	tax
	beq     L04F4
	lda     #$01
	ldy     #$00
	sta     (sp),y
	jmp     L058C
L058B:	tya
	dey
	sta     (sp),y
	jmp     L058C
L0531:	lda     _brk_pc
	ldx     _brk_pc+1
	jsr     _DbgDisAsmLen
	clc
	adc     _brk_pc
	sta     _brk_pc
	txa
	adc     _brk_pc+1
	sta     _brk_pc+1
	jsr     _InitAsm
	jmp     L04F4
L0537:	lda     _ActiveFrame
	jsr     pusha
	jsr     _Redraw
	jmp     L04F4
L053B:	jsr     _clrscr
	ldx     #$00
	lda     #$01
	jsr     _exit
L04F4:	ldy     #$00
L058C:	lda     (sp),y
	jeq     L04F2
	jmp     incsp2

.endproc

