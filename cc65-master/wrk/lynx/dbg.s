;
; File generated by cc65 v 2.14.0
;
	.fopt		compiler,"cc65 v 2.14.0"
	.setcpu		"65C02"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.import		_exit
	.import		_strlen
	.import		_clrscr
	.import		_kbhit
	.import		_gotoxy
	.import		_wherex
	.import		_cputc
	.import		_cputcxy
	.import		_cputsxy
	.import		_cgetc
	.import		_cursor
	.import		_revers
	.import		_textcolor
	.import		_bgcolor
	.import		_bordercolor
	.import		_chline
	.import		_chlinexy
	.import		_cvlinexy
	.import		_cclearxy
	.import		_cputhex8
	.import		_cputhex16
	.import		__ctype
	.import		_toupper
	.import		_brk_a
	.import		_brk_x
	.import		_brk_y
	.import		_brk_sr
	.import		_brk_pc
	.import		_DbgDisAsm
	.import		_DbgDisAsmLen
	.import		_DbgIsRAM
	.import		_DbgMemDump
	.import		_DbgSP
	.import		_DbgCS
	.import		_DbgHI
	.export		_DbgBreakCount
	.export		_DbgBreaks
	.import		_DbgGetBreakSlot
	.import		_DbgIsBreak
	.export		_DbgEntry

.segment	"DATA"

_RegText:
	.byte	$01
	.byte	$00
	.addr	L001C
	.byte	$01
	.byte	$01
	.addr	L0020
	.byte	$01
	.byte	$02
	.addr	L0024
	.byte	$01
	.byte	$03
	.addr	L0028
	.byte	$01
	.byte	$04
	.addr	L002C
	.byte	$01
	.byte	$05
	.addr	L0030
	.byte	$01
	.byte	$06
	.addr	L0034
	.byte	$01
	.byte	$07
	.addr	L0038
_HelpText:
	.byte	$01
	.byte	$00
	.addr	L003C
	.byte	$01
	.byte	$01
	.addr	L0040
	.byte	$01
	.byte	$02
	.addr	L0044
	.byte	$01
	.byte	$03
	.addr	L0048
	.byte	$01
	.byte	$04
	.addr	L004C
	.byte	$01
	.byte	$05
	.addr	L0050
	.byte	$01
	.byte	$06
	.addr	L0054
	.byte	$01
	.byte	$07
	.addr	L0058
	.byte	$01
	.byte	$08
	.addr	L005C
	.byte	$01
	.byte	$09
	.addr	L0060
	.byte	$01
	.byte	$0A
	.addr	L0064
	.byte	$01
	.byte	$0B
	.addr	L0068
	.byte	$01
	.byte	$0C
	.addr	L006C
	.byte	$01
	.byte	$0D
	.addr	L0070
	.byte	$01
	.byte	$0E
	.addr	L0074
	.byte	$01
	.byte	$0F
	.addr	L0078
	.byte	$01
	.byte	$10
	.addr	L007C
	.byte	$01
	.byte	$11
	.addr	L0080
_AsmFrame:
	.byte	$2B
	.byte	$2B
	.byte	$2B
	.byte	$2B
	.byte	$00
	.byte	$00
	.byte	$1E
	.byte	$0F
	.byte	$1D
	.byte	$0E
	.byte	$01
	.addr	_AsmHandler
	.byte	$00
	.word	$0000
_RegFrame:
	.byte	$2B
	.byte	$2B
	.byte	$2B
	.byte	$2B
	.byte	$1E
	.byte	$00
	.byte	$27
	.byte	$09
	.byte	$08
	.byte	$08
	.byte	$01
	.addr	_RegHandler
	.byte	$08
	.addr	_RegText
_StackFrame:
	.byte	$2B
	.byte	$2B
	.byte	$2B
	.byte	$2B
	.byte	$1E
	.byte	$09
	.byte	$27
	.byte	$0F
	.byte	$08
	.byte	$05
	.byte	$01
	.addr	_StackHandler
	.byte	$00
	.word	$0000
_CStackFrame:
	.byte	$2B
	.byte	$2B
	.byte	$2B
	.byte	$2B
	.byte	$1E
	.byte	$0F
	.byte	$27
	.byte	$18
	.byte	$08
	.byte	$08
	.byte	$01
	.addr	_CStackHandler
	.byte	$00
	.word	$0000
_DumpFrame:
	.byte	$2B
	.byte	$2B
	.byte	$2B
	.byte	$2B
	.byte	$00
	.byte	$0F
	.byte	$1E
	.byte	$18
	.byte	$1D
	.byte	$08
	.byte	$01
	.addr	_DumpHandler
	.byte	$00
	.word	$0000
_HelpFrame:
	.byte	$2B
	.byte	$2B
	.byte	$2B
	.byte	$2B
	.byte	$00
	.byte	$00
	.byte	$27
	.byte	$18
	.byte	$26
	.byte	$17
	.byte	$00
	.addr	_HelpHandler
	.byte	$12
	.addr	_HelpText
_Frames:
	.addr	_AsmFrame
	.addr	_RegFrame
	.addr	_StackFrame
	.addr	_CStackFrame
	.addr	_DumpFrame
	.addr	_HelpFrame
_ActiveFrame:
	.word	$FFFF
_ActivePrompt:
	.word	$0000
_DbgBreakCount:
	.byte	$00

.segment	"RODATA"

L0044:
	.byte	$46,$33,$2C,$20,$75,$20,$20,$20,$20,$20,$52,$75,$6E,$20,$75,$6E
	.byte	$74,$69,$6C,$20,$73,$75,$62,$72,$6F,$75,$74,$69,$6E,$65,$20,$72
	.byte	$65,$74,$75,$72,$6E,$73,$00
L0250:
	.byte	$43,$61,$6E,$6E,$6F,$74,$20,$73,$65,$74,$20,$62,$72,$65,$61,$6B
	.byte	$70,$6F,$69,$6E,$74,$20,$2D,$20,$70,$72,$65,$73,$73,$20,$61,$20
	.byte	$6B,$65,$79,$00
L0264:
	.byte	$54,$6F,$6F,$20,$6D,$61,$6E,$79,$20,$62,$72,$65,$61,$6B,$70,$6F
	.byte	$69,$6E,$74,$73,$20,$2D,$20,$70,$72,$65,$73,$73,$20,$61,$20,$6B
	.byte	$65,$79,$00
L0080:
	.byte	$73,$20,$20,$20,$20,$20,$20,$20,$20,$20,$53,$6B,$69,$70,$20,$6E
	.byte	$65,$78,$74,$20,$69,$6E,$73,$74,$72,$75,$63,$74,$69,$6F,$6E,$00
L0054:
	.byte	$31,$2D,$35,$20,$20,$20,$20,$20,$20,$20,$53,$65,$6C,$65,$63,$74
	.byte	$20,$61,$63,$74,$69,$76,$65,$20,$77,$69,$6E,$64,$6F,$77,$00
L0074:
	.byte	$70,$20,$20,$20,$20,$20,$20,$20,$20,$20,$55,$73,$65,$20,$61,$73
	.byte	$20,$6E,$65,$77,$20,$50,$43,$20,$76,$61,$6C,$75,$65,$00
L006C:
	.byte	$66,$20,$20,$20,$20,$20,$20,$20,$20,$20,$46,$6F,$6C,$6C,$6F,$77
	.byte	$20,$69,$6E,$73,$74,$72,$75,$63,$74,$69,$6F,$6E,$00
L0040:
	.byte	$46,$32,$2C,$20,$74,$20,$20,$20,$20,$20,$54,$6F,$67,$67,$6C,$65
	.byte	$20,$62,$72,$65,$61,$6B,$70,$6F,$69,$6E,$74,$00
L024B:
	.byte	$49,$6E,$76,$61,$6C,$69,$64,$20,$69,$6E,$70,$75,$74,$20,$2D,$20
	.byte	$70,$72,$65,$73,$73,$20,$61,$20,$6B,$65,$79,$00
L0189:
	.byte	$50,$72,$65,$73,$73,$20,$61,$6E,$79,$20,$6B,$65,$79,$20,$74,$6F
	.byte	$20,$63,$6F,$6E,$74,$69,$6E,$75,$65,$00
L0048:
	.byte	$46,$34,$2C,$20,$68,$20,$20,$20,$20,$20,$52,$75,$6E,$20,$74,$6F
	.byte	$20,$63,$75,$72,$73,$6F,$72,$00
L007C:
	.byte	$72,$20,$20,$20,$20,$20,$20,$20,$20,$20,$52,$65,$64,$72,$61,$77
	.byte	$20,$73,$63,$72,$65,$65,$6E,$00
L0064:
	.byte	$61,$2F,$7A,$20,$20,$20,$20,$20,$20,$20,$4D,$6F,$76,$65,$20,$75
	.byte	$70,$2F,$64,$6F,$77,$6E,$00
L0060:
	.byte	$43,$75,$72,$73,$6F,$72,$20,$20,$20,$20,$4D,$6F,$76,$65,$20,$75
	.byte	$70,$2F,$64,$6F,$77,$6E,$00
L0070:
	.byte	$6F,$20,$20,$20,$20,$20,$20,$20,$20,$20,$47,$6F,$74,$6F,$20,$6F
	.byte	$72,$69,$67,$69,$6E,$00
L004C:
	.byte	$46,$37,$2C,$20,$73,$70,$61,$63,$65,$20,$53,$74,$65,$70,$20,$69
	.byte	$6E,$74,$6F,$00
L0050:
	.byte	$46,$38,$2C,$20,$65,$6E,$74,$65,$72,$20,$53,$74,$65,$70,$20,$6F
	.byte	$76,$65,$72,$00
L0058:
	.byte	$2B,$20,$20,$20,$20,$20,$20,$20,$20,$20,$50,$61,$67,$65,$20,$64
	.byte	$6F,$77,$6E,$00
L0068:
	.byte	$63,$20,$20,$20,$20,$20,$20,$20,$20,$20,$43,$6F,$6E,$74,$69,$6E
	.byte	$75,$65,$00
L005C:
	.byte	$2D,$20,$20,$20,$20,$20,$20,$20,$20,$20,$50,$61,$67,$65,$20,$75
	.byte	$70,$00
L0185:
	.byte	$50,$72,$65,$73,$73,$20,$46,$31,$20,$66,$6F,$72,$20,$68,$65,$6C
	.byte	$70,$00
L0078:
	.byte	$71,$20,$20,$20,$20,$20,$20,$20,$20,$20,$51,$75,$69,$74,$00
L003C:
	.byte	$46,$31,$2C,$20,$3F,$20,$20,$20,$20,$20,$48,$65,$6C,$70,$00
L0245:
	.byte	$47,$6F,$74,$6F,$3A,$20,$00
L0020:
	.byte	$53,$52,$00
L0034:
	.byte	$43,$53,$00
L0038:
	.byte	$48,$49,$00
L0030:
	.byte	$53,$50,$00
L03F5:
	.byte	$2D,$3E,$00
L001C:
	.byte	$50,$43,$00
L0028:
	.byte	$58,$00
L0024:
	.byte	$41,$00
L002C:
	.byte	$59,$00

.segment	"BSS"

_AsmAddr:
	.res	2,$00
_DumpAddr:
	.res	2,$00
_CStackAddr:
	.res	2,$00
_StackAddr:
	.res	1,$00
_PromptColor:
	.res	1,$00
_PromptLength:
	.res	1,$00
_DbgBreaks:
	.res	48,$00

; ---------------------------------------------------------------
; unsigned char __near__ AsmHandler (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_AsmHandler: near

.segment	"CODE"

	jsr     decsp3
L0336:	jsr     _UpdateAsm
	jsr     stax0sp
	jsr     _GetKeyUpdate
	ldy     #$02
	sta     (sp),y
	cmp     #$2B
	beq     L0341
	cmp     #$2D
	beq     L0345
	cmp     #$61
	jeq     L035D
	cmp     #$66
	beq     L034F
	cmp     #$67
	beq     L0352
	cmp     #$6F
	beq     L0356
	cmp     #$70
	beq     L0359
	cmp     #$74
	beq     L034B
	cmp     #$7A
	jeq     L0363
	jmp     L0546
L0341:	dey
	lda     (sp),y
	sta     _AsmAddr+1
	lda     (sp)
	sta     _AsmAddr
	bra     L0336
L0345:	jsr     decsp3
	lda     _AsmAddr
	dey
	sta     (sp),y
	iny
	lda     _AsmAddr+1
	sta     (sp),y
	lda     _AsmFrame+9
	sta     (sp)
	jsr     _AsmBack
	sta     _AsmAddr
	stx     _AsmAddr+1
	bra     L0336
L034B:	lda     _AsmAddr
	ldx     _AsmAddr+1
	jsr     pushax
	jsr     _DbgToggleUserBreak
	bra     L0336
L034F:	jsr     _AsmFollow
	bra     L0336
L0352:	lda     #<(_AsmAddr)
	ldx     #>(_AsmAddr)
	jsr     pushax
	jsr     _InputGoto
	jmp     L0336
L0356:	jsr     _AsmHome
	jmp     L0336
L0359:	lda     _AsmAddr
	sta     _brk_pc
	lda     _AsmAddr+1
	sta     _brk_pc+1
	jmp     L0336
L035D:	jsr     decsp3
	lda     _AsmAddr
	dey
	sta     (sp),y
	iny
	lda     _AsmAddr+1
	sta     (sp),y
	lda     #$01
	sta     (sp)
	jsr     _AsmBack
	sta     _AsmAddr
	stx     _AsmAddr+1
	jmp     L0336
L0363:	lda     _AsmAddr
	ldx     _AsmAddr+1
	jsr     _DbgDisAsmLen
	clc
	adc     _AsmAddr
	sta     _AsmAddr
	txa
	adc     _AsmAddr+1
	sta     _AsmAddr+1
	jmp     L0336
L0546:	ldx     #$00
	lda     (sp),y
	jmp     incsp3

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ RegHandler (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_RegHandler: near

.segment	"CODE"

	jmp     _GetKeyUpdate

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ StackHandler (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_StackHandler: near

.segment	"CODE"

	jsr     decsp1
	lda     _StackFrame+9
	jsr     pusha
L03C1:	jsr     _GetKeyUpdate
	ldy     #$01
	sta     (sp),y
	cmp     #$2B
	beq     L03CA
	cmp     #$2D
	beq     L03CE
	cmp     #$61
	beq     L03D5
	cmp     #$6F
	beq     L03D2
	cmp     #$7A
	beq     L03D8
	bra     L0547
L03CA:	lda     (sp)
	clc
	adc     _StackAddr
	sta     _StackAddr
	bra     L03C8
L03CE:	lda     (sp)
	eor     #$FF
	sec
	adc     _StackAddr
	sta     _StackAddr
	bra     L03C8
L03D2:	jsr     _StackHome
	bra     L03C8
L03D5:	dec     _StackAddr
	bra     L03C8
L03D8:	inc     _StackAddr
	bra     L03C8
L0547:	ldx     #$00
	lda     (sp),y
	jmp     incsp2
L03C8:	jsr     _UpdateStack
	bra     L03C1

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ CStackHandler (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_CStackHandler: near

.segment	"CODE"

	jsr     decsp1
	lda     _CStackFrame+9
	asl     a
	jsr     pusha
L0401:	jsr     _GetKeyUpdate
	ldy     #$01
	sta     (sp),y
	cmp     #$2B
	beq     L040A
	cmp     #$2D
	beq     L040E
	cmp     #$61
	beq     L0415
	cmp     #$6F
	beq     L0412
	cmp     #$7A
	beq     L041A
	bra     L0548
L040A:	lda     (sp)
	clc
	adc     _CStackAddr
	sta     _CStackAddr
	lda     #$00
	adc     _CStackAddr+1
	sta     _CStackAddr+1
	bra     L0408
L040E:	lda     (sp)
	eor     #$FF
	sec
	adc     _CStackAddr
	sta     _CStackAddr
	lda     #$FF
	adc     _CStackAddr+1
	sta     _CStackAddr+1
	bra     L0408
L0412:	jsr     _CStackHome
	bra     L0408
L0415:	lda     _CStackAddr
	sec
	sbc     #$02
	sta     _CStackAddr
	bcs     L0408
	dec     _CStackAddr+1
	bra     L0408
L041A:	lda     #$02
	clc
	adc     _CStackAddr
	sta     _CStackAddr
	bcc     L0408
	inc     _CStackAddr+1
	bra     L0408
L0548:	ldx     #$00
	lda     (sp),y
	jmp     incsp2
L0408:	jsr     _UpdateCStack
	bra     L0401

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ DumpHandler (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_DumpHandler: near

.segment	"CODE"

	jsr     decsp1
	ldx     #$00
	lda     _DumpFrame+9
	jsr     shlax3
	jsr     pushax
L0440:	jsr     _GetKeyUpdate
	ldy     #$02
	sta     (sp),y
	cmp     #$2B
	beq     L0449
	cmp     #$2D
	beq     L044D
	cmp     #$61
	beq     L0458
	cmp     #$67
	beq     L0451
	cmp     #$6F
	beq     L0455
	cmp     #$7A
	beq     L045D
	bra     L0549
L0449:	dey
	lda     (sp),y
	tax
	lda     (sp)
	clc
	adc     _DumpAddr
	sta     _DumpAddr
	txa
	adc     _DumpAddr+1
	sta     _DumpAddr+1
	bra     L0447
L044D:	dey
	lda     (sp),y
	tax
	lda     (sp)
	eor     #$FF
	sec
	adc     _DumpAddr
	sta     _DumpAddr
	txa
	eor     #$FF
	adc     _DumpAddr+1
	sta     _DumpAddr+1
	bra     L0447
L0451:	lda     #<(_DumpAddr)
	ldx     #>(_DumpAddr)
	jsr     pushax
	jsr     _InputGoto
	bra     L0447
L0455:	jsr     _DumpHome
	bra     L0447
L0458:	lda     _DumpAddr
	sec
	sbc     #$08
	sta     _DumpAddr
	bcs     L0447
	dec     _DumpAddr+1
	bra     L0447
L045D:	lda     #$08
	clc
	adc     _DumpAddr
	sta     _DumpAddr
	bcc     L0447
	inc     _DumpAddr+1
	bra     L0447
L0549:	ldx     #$00
	lda     (sp),y
	jmp     incsp3
L0447:	jsr     _UpdateDump
	jmp     L0440

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ HelpHandler (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_HelpHandler: near

.segment	"CODE"

	lda     _ActiveFrame
	ldx     _ActiveFrame+1
	jsr     pushax
	jsr     decsp3
	lda     #$05
	ldy     #$01
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	ina
	sta     (sp)
	jsr     _ActivateFrame
	jsr     _AnyKeyPrompt
	jsr     _cgetc
	lda     (sp)
	jsr     pusha
	jsr     _Redraw
	ldx     #$00
	txa
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ DisplayPrompt (__near__ unsigned char*)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_DisplayPrompt: near

.segment	"CODE"

	jsr     decsp1
	lda     #$0F
	jsr     _textcolor
	sta     (sp)
	lda     _ActivePrompt
	ora     _ActivePrompt+1
	beq     L016A
	lda     _PromptColor
	jsr     _textcolor
	jsr     decsp2
	lda     #$28
	sec
	sbc     _PromptLength
	lsr     a
	ldy     #$01
	sta     (sp),y
	lda     #$18
	sta     (sp)
	lda     _PromptLength
	jsr     _chlinexy
L016A:	ldy     #$02
	lda     (sp),y
	sta     _ActivePrompt+1
	dey
	lda     (sp),y
	sta     _ActivePrompt
	lda     (sp)
	sta     _PromptColor
	lda     _ActivePrompt
	ldx     _ActivePrompt+1
	jsr     _strlen
	sta     _PromptLength
	lda     #$0F
	jsr     _textcolor
	jsr     decsp2
	lda     #$28
	sec
	sbc     _PromptLength
	lsr     a
	ldy     #$01
	sta     (sp),y
	lda     #$18
	sta     (sp)
	lda     _ActivePrompt
	ldx     _ActivePrompt+1
	jsr     _cputsxy
	lda     _PromptColor
	jsr     _textcolor
	jmp     incsp3

.endproc

; ---------------------------------------------------------------
; void __near__ SingleStep (unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_SingleStep: near

.segment	"CODE"

	jsr     decsp1
	lda     _brk_pc
	sta     ptr1
	lda     _brk_pc+1
	sta     ptr1+1
	lda     (ptr1)
	cmp     #$10
	beq     L0496
	cmp     #$20
	jeq     L04AA
	cmp     #$30
	beq     L0496
	cmp     #$40
	beq     L04A5
	cmp     #$4C
	beq     L0480
	cmp     #$50
	beq     L0496
	cmp     #$60
	beq     L04A2
	cmp     #$6C
	beq     L0484
	cmp     #$70
	beq     L0496
	cmp     #$90
	beq     L0496
	cmp     #$B0
	beq     L0496
	cmp     #$D0
	beq     L0496
	cmp     #$F0
	beq     L0496
	bra     L047E
L0480:	jsr     _GetArg16
	bra     L054B
L0484:	jsr     _GetArg16
	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	lda     (ptr1)
	bra     L054B
L0496:	lda     _brk_pc
	ldx     _brk_pc+1
	ldy     #$01
	jsr     ldaidx
	sta     (sp)
	lda     (sp)
	beq     L047E
	ldx     #$00
	lda     (sp)
	bpl     L049F
	dex
L049F:	clc
	adc     _brk_pc
	pha
	txa
	adc     _brk_pc+1
	tax
	pla
	clc
	adc     #$02
	bcc     L04A0
	inx
L04A0:	jsr     pushax
	jsr     _DbgSetTmpBreak
	bra     L047E
L04A2:	jsr     _SetRTSBreak
	jmp     incsp2
L04A5:	lda     #$01
	jsr     pusha
	jsr     _GetStack16
	bra     L054B
L04AA:	ldy     #$01
	lda     (sp),y
	beq     L047E
	jsr     _GetArg16
	bra     L054B
L047E:	lda     _brk_pc
	ldx     _brk_pc+1
	jsr     pushax
	lda     _brk_pc
	ldx     _brk_pc+1
	jsr     _DbgDisAsmLen
	jsr     tosaddax
L054B:	jsr     pushax
	jsr     _DbgSetTmpBreak
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ RedrawStatic (unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_RedrawStatic: near

.segment	"CODE"

	lda     #$FF
	sta     _ActiveFrame
	sta     _ActiveFrame+1
	ina
	jsr     _bordercolor
	lda     #$00
	jsr     _bgcolor
	jsr     _clrscr
	lda     #$00
	jsr     _cursor
	lda     #$0F
	jsr     _textcolor
	jsr     _DrawFrames
	jsr     _HelpPrompt
	jsr     decsp3
	ldy     #$03
	lda     (sp),y
	ldy     #$01
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	sta     (sp)
	jsr     _ActivateFrame
	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; void __near__ Redraw (unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_Redraw: near

.segment	"CODE"

	lda     (sp)
	jsr     pusha
	jsr     _RedrawStatic
	jsr     _UpdateAsm
	jsr     _UpdateReg
	jsr     _UpdateStack
	jsr     _UpdateCStack
	jsr     _UpdateDump
	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ GetKeyUpdate (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_GetKeyUpdate: near

.segment	"BSS"

L04CC:
	.res	1,$00

.segment	"CODE"

	bra     L04CF
L054C:	lda     L04CC
	beq     L04D5
	cmp     #$01
	beq     L04D8
	cmp     #$02
	beq     L04DB
	cmp     #$03
	beq     L04DE
	bra     L054D
L04D5:	jsr     _UpdateAsm
	bra     L054D
L04D8:	jsr     _UpdateStack
	bra     L054D
L04DB:	jsr     _UpdateCStack
	bra     L054D
L04DE:	jsr     _UpdateDump
L054D:	lda     L04CC
	ina
	and     #$03
	sta     L04CC
L04CF:	jsr     _kbhit
	tax
	beq     L054C
	jmp     _cgetc

.endproc

; ---------------------------------------------------------------
; void __near__ DrawFrame (register __near__ struct $anon-struct-0008*, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_DrawFrame: near

.segment	"CODE"

	ldy     #$01
	ldx     #$04
	jsr     regswap2
	ldy     #$0B
	jsr     subysp
	ldy     #$0B
	lda     (sp),y
	beq     L00E7
	lda     #$0F
	jsr     _textcolor
	sta     (sp)
	lda     #$2B
	ldy     #$07
	sta     (sp),y
	dey
	sta     (sp),y
	dey
	sta     (sp),y
	bra     L0550
L00E7:	lda     #$0F
	jsr     _textcolor
	sta     (sp)
	lda     (regbank+4)
	ldy     #$07
	sta     (sp),y
	ldy     #$01
	lda     (regbank+4),y
	ldy     #$06
	sta     (sp),y
	ldy     #$02
	lda     (regbank+4),y
	ldy     #$05
	sta     (sp),y
	ldy     #$03
	lda     (regbank+4),y
L0550:	ldy     #$04
	sta     (sp),y
	lda     (regbank+4),y
	dey
	sta     (sp),y
	ldy     #$05
	lda     (regbank+4),y
	ldy     #$02
	sta     (sp),y
	ldy     #$08
	lda     (regbank+4),y
	ldy     #$01
	sta     (sp),y
	jsr     decsp2
	ldy     #$05
	lda     (sp),y
	ldy     #$01
	sta     (sp),y
	ldy     #$04
	lda     (sp),y
	sta     (sp)
	ldy     #$09
	lda     (sp),y
	jsr     _cputcxy
	ldy     #$01
	lda     (sp),y
	jsr     _chline
	ldy     #$06
	lda     (sp),y
	jsr     _cputc
	jsr     decsp2
	ldy     #$05
	lda     (sp),y
	ldy     #$01
	sta     (sp),y
	ldy     #$04
	clc
	lda     #$01
	adc     (sp),y
	sta     (sp),y
	sta     (sp)
	ldy     #$09
	lda     (regbank+4),y
	jsr     _cvlinexy
	ldy     #$05
	lda     (sp),y
	jsr     _cputc
	ldy     #$01
	lda     (sp),y
	jsr     _chline
	ldy     #$04
	lda     (sp),y
	jsr     _cputc
	jsr     decsp2
	ldy     #$06
	lda     (regbank+4),y
	ldy     #$01
	sta     (sp),y
	ldy     #$04
	lda     (sp),y
	sta     (sp)
	ldy     #$09
	lda     (regbank+4),y
	jsr     _cvlinexy
	lda     #$0F
	jsr     _textcolor
	ldy     #$0D
	lda     (regbank+4),y
	ldy     #$08
	sta     (sp),y
	ldy     #$0F
	lda     (regbank+4),y
	tax
	dey
	lda     (regbank+4),y
	ldy     #$09
	jsr     staxysp
	bra     L0124
L0122:	jsr     decsp2
	ldy     #$05
	lda     (sp),y
	jsr     pusha0
	ldy     #$0E
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	lda     (ptr1)
	jsr     tosadda0
	ldy     #$01
	sta     (sp),y
	ldy     #$04
	lda     (sp),y
	jsr     pusha0
	ldy     #$0E
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$01
	lda     (ptr1),y
	jsr     tosadda0
	sta     (sp)
	ldy     #$0C
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$03
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _cputsxy
	ldy     #$09
	ldx     #$00
	lda     #$04
	jsr     addeqysp
L0124:	ldy     #$08
	lda     (sp),y
	pha
	dea
	sta     (sp),y
	pla
	tax
	bne     L0122
	lda     (sp)
	jsr     _textcolor
	ldy     #$0C
	lda     (sp),y
	sta     regbank+4
	iny
	lda     (sp),y
	sta     regbank+5
	iny
	jmp     addysp

.endproc

; ---------------------------------------------------------------
; void __near__ DrawFrames (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_DrawFrames: near

.segment	"CODE"

	jsr     decsp3
	lda     #$00
	ldy     #$02
L0552:	sta     (sp),y
	cmp     #$06
	bcs     L012F
	ldx     #$00
	lda     (sp),y
	asl     a
	bcc     L0553
	inx
	clc
L0553:	adc     #<(_Frames)
	sta     ptr1
	txa
	adc     #>(_Frames)
	sta     ptr1+1
	dey
	lda     (ptr1),y
	tax
	lda     (ptr1)
	jsr     stax0sp
	sta     ptr1
	stx     ptr1+1
	ldy     #$0A
	lda     (ptr1),y
	beq     L0130
	jsr     decsp3
	ldy     #$04
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	ldy     #$01
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	lda     #$00
	sta     (sp)
	jsr     _DrawFrame
L0130:	ldy     #$02
	clc
	lda     #$01
	adc     (sp),y
	bra     L0552
L012F:	jmp     incsp3

.endproc

; ---------------------------------------------------------------
; void __near__ ActivateFrame (int, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_ActivateFrame: near

.segment	"CODE"

	jsr     decsp1
	lda     regbank+4
	ldx     regbank+5
	jsr     pushax
	ldy     #$05
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	cpx     _ActiveFrame+1
	bne     L0556
	cmp     _ActiveFrame
	jeq     L0142
L0556:	ldx     _ActiveFrame+1
	bmi     L0144
	jsr     decsp3
	lda     _ActiveFrame
	ldx     _ActiveFrame+1
	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_Frames)
	sta     ptr1
	lda     tmp1
	adc     #>(_Frames)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	lda     (ptr1)
	ldy     #$01
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	lda     #$00
	sta     (sp)
	jsr     _DrawFrame
L0144:	ldy     #$05
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	sta     _ActiveFrame
	stx     _ActiveFrame+1
	txa
	bmi     L014A
	lda     _ActiveFrame
	ldx     _ActiveFrame+1
	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_Frames)
	sta     ptr1
	lda     tmp1
	adc     #>(_Frames)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	lda     (ptr1)
	sta     regbank+4
	stx     regbank+4+1
	ldy     #$03
	lda     (sp),y
	beq     L0154
	ldy     #$05
	lda     (regbank+4),y
	ina
	ldy     #$02
L0555:	sta     (sp),y
	lda     (sp),y
	jsr     pusha0
	ldy     #$07
	lda     (regbank+4),y
	jsr     tosicmp0
	bcs     L0154
	jsr     decsp2
	ldy     #$04
	lda     (regbank+4),y
	ina
	ldy     #$01
	sta     (sp),y
	ldy     #$04
	lda     (sp),y
	sta     (sp)
	ldy     #$08
	lda     (regbank+4),y
	jsr     _cclearxy
	ldy     #$02
	clc
	lda     #$01
	adc     (sp),y
	bra     L0555
L0154:	jsr     decsp3
	lda     regbank+4
	ldy     #$01
	sta     (sp),y
	iny
	lda     regbank+4+1
	sta     (sp),y
	lda     #$01
	sta     (sp)
	jsr     _DrawFrame
L014A:	lda     _ActivePrompt
	ldx     _ActivePrompt+1
	jsr     pushax
	jsr     _DisplayPrompt
L0142:	lda     (sp)
	sta     regbank+4
	ldy     #$01
	lda     (sp),y
	sta     regbank+5
	jmp     incsp6

.endproc

; ---------------------------------------------------------------
; void __near__ HelpPrompt (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_HelpPrompt: near

.segment	"CODE"

	lda     #<(L0185)
	ldx     #>(L0185)
	jsr     pushax
	jmp     _DisplayPrompt

.endproc

; ---------------------------------------------------------------
; void __near__ AnyKeyPrompt (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_AnyKeyPrompt: near

.segment	"CODE"

	lda     #<(L0189)
	ldx     #>(L0189)
	jsr     pushax
	jmp     _DisplayPrompt

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ IsAbortKey (unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_IsAbortKey: near

.segment	"CODE"

	ldx     #$00
	txa
	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ Input (__near__ unsigned char*, __near__ unsigned char*, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_Input: near

.segment	"CODE"

	ldy     #$0A
	jsr     subysp
	lda     #$00
	ldy     #$01
	sta     (sp),y
	lda     #$18
	sta     (sp)
	lda     #$28
	jsr     _cclearxy
	lda     #$0F
	jsr     _textcolor
	ldy     #$05
	sta     (sp),y
	jsr     decsp2
	lda     #$00
	ldy     #$01
	sta     (sp),y
	lda     #$18
	sta     (sp)
	ldy     #$0E
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     _cputsxy
	lda     #$0F
	jsr     _textcolor
	jsr     _wherex
	ldy     #$03
	sta     (sp),y
	lda     #$01
	jsr     _cursor
	ldy     #$04
	sta     (sp),y
	lda     #$00
	ldy     #$01
	sta     (sp),y
	iny
	sta     (sp),y
L01A4:	jsr     _cgetc
	sta     (sp)
	tay
	lda     __ctype,y
	and     #$07
	beq     L01A9
	ldy     #$02
	ldx     #$00
	lda     (sp),y
	ldy     #$08
	cmp     (sp),y
	bcs     L01A9
	ldy     #$02
	lda     (sp),y
	clc
	ldy     #$09
	adc     (sp),y
	sta     ptr1
	txa
	iny
	adc     (sp),y
	sta     ptr1+1
	lda     (sp)
	sta     (ptr1)
	jsr     decsp2
	ldy     #$04
	lda     (sp),y
	clc
	iny
	adc     (sp),y
	ldy     #$01
	sta     (sp),y
	lda     #$18
	sta     (sp)
	iny
	lda     (sp),y
	jsr     _cputcxy
	ldy     #$02
	clc
	lda     #$01
	adc     (sp),y
	bra     L055A
L01A9:	ldy     #$02
	lda     (sp),y
	beq     L0563
	lda     (sp)
	cmp     #$08
	bne     L0563
	ldy     #$02
	lda     (sp),y
	sec
	sbc     #$01
	sta     (sp),y
	jsr     decsp2
	ldy     #$04
	lda     (sp),y
	clc
	iny
	adc     (sp),y
	ldy     #$01
	sta     (sp),y
	lda     #$18
	sta     (sp)
	lda     #$20
	jsr     _cputcxy
	ldy     #$02
	lda     (sp),y
	clc
	iny
	adc     (sp),y
	jsr     pusha
	lda     #$18
	jsr     _gotoxy
	bra     L01D8
L0563:	lda     (sp)
	cmp     #$0A
	bne     L0561
	ldy     #$02
	lda     (sp),y
	clc
	ldy     #$09
	adc     (sp),y
	sta     ptr1
	lda     #$00
	iny
	adc     (sp),y
	sta     ptr1+1
	lda     #$00
	sta     (ptr1)
	ina
	bra     L0562
L0561:	lda     (sp)
	jsr     pusha
	jsr     _IsAbortKey
	tax
	beq     L01D8
	lda     #$02
L0562:	ldy     #$01
L055A:	sta     (sp),y
L01D8:	ldy     #$01
	lda     (sp),y
	jeq     L01A4
	ldy     #$04
	lda     (sp),y
	jsr     _cursor
	ldy     #$05
	lda     (sp),y
	jsr     _textcolor
	jsr     _DrawFrames
	lda     _ActiveFrame
	ldx     _ActiveFrame+1
	ldy     #$06
	jsr     staxysp
	lda     #$FF
	sta     _ActiveFrame
	sta     _ActiveFrame+1
	jsr     decsp3
	ldy     #$0A
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	ldy     #$01
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	lda     #$00
	sta     (sp)
	jsr     _ActivateFrame
	ldy     #$01
	lda     (sp),y
	cmp     #$01
	jsr     booleq
	ldy     #$0D
	jmp     addysp

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ InputHex (__near__ unsigned char*, __near__ unsigned int*)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_InputHex: near

.segment	"CODE"

	ldy     #$0F
	jsr     subysp
	ldy     #$12
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	ldy     #$03
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	lda     sp
	ldx     sp+1
	clc
	adc     #$0A
	bcc     L01F2
	inx
L01F2:	ldy     #$01
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	lda     #$04
	sta     (sp)
	jsr     _Input
	tax
	jeq     L0239
	ldy     #$05
	lda     (sp),y
	tay
	lda     __ctype,y
	and     #$08
	bne     L0568
	tax
	jmp     L0239
L0568:	lda     sp
	ldx     sp+1
	clc
	adc     #$05
	bcc     L0206
	inx
L0206:	ldy     #$03
	jsr     staxysp
	lda     #$00
	sta     (sp)
	ldy     #$01
	sta     (sp),y
	bra     L020B
L0209:	ldy     #$01
	lda     (sp),y
	tax
	lda     (sp)
	jsr     shlax4
	jsr     stax0sp
	ldy     #$02
	lda     (sp),y
	tay
	lda     __ctype,y
	and     #$04
	beq     L021E
	ldy     #$02
	lda     (sp),y
	sec
	sbc     #$30
	bra     L0565
L021E:	ldy     #$02
	lda     (sp),y
	ldx     #$00
	jsr     _toupper
	sec
	sbc     #$37
	ldy     #$02
L0565:	sta     (sp),y
	ldx     #$00
	jsr     addeq0sp
	ldy     #$03
	ldx     #$00
	lda     #$01
	jsr     addeqysp
L020B:	ldy     #$04
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	lda     (ptr1)
	dey
	sta     (sp),y
	tax
	beq     L0564
	lda     (sp),y
	tay
	lda     __ctype,y
	and     #$08
	bne     L0209
L0564:	ldy     #$0B
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$01
	lda     (sp),y
	tax
	lda     (sp)
	sta     (ptr1)
	ldy     #$01
	txa
	sta     (ptr1),y
	ldx     #$00
	tya
L0239:	ldy     #$0E
	jmp     addysp

.endproc

; ---------------------------------------------------------------
; void __near__ ErrorPrompt (__near__ unsigned char*)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_ErrorPrompt: near

.segment	"CODE"

	lda     _ActivePrompt
	ldx     _ActivePrompt+1
	jsr     pushax
	ldy     #$05
	jsr     pushwysp
	jsr     _DisplayPrompt
	jsr     _cgetc
	jsr     pushw0sp
	jsr     _DisplayPrompt
	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ InputGoto (__near__ unsigned int*)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_InputGoto: near

.segment	"CODE"

	jsr     decsp5
	lda     #<(L0245)
	ldy     #$02
	sta     (sp),y
	iny
	lda     #>(L0245)
	sta     (sp),y
	ldy     #$06
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	sta     (sp)
	ldy     #$01
	txa
	sta     (sp),y
	jsr     _InputHex
	sta     (sp)
	lda     (sp)
	bne     L056D
	lda     #<(L024B)
	ldx     #>(L024B)
	jsr     pushax
	jsr     _ErrorPrompt
L056D:	ldx     #$00
	lda     (sp)
	jmp     incsp3

.endproc

; ---------------------------------------------------------------
; void __near__ BreakInRomError (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_BreakInRomError: near

.segment	"CODE"

	lda     #<(L0250)
	ldx     #>(L0250)
	jsr     pushax
	jmp     _ErrorPrompt

.endproc

; ---------------------------------------------------------------
; void __near__ DbgSetTmpBreak (unsigned int)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_DbgSetTmpBreak: near

.segment	"CODE"

	jsr     _DbgGetBreakSlot
	jsr     pushax
	ldy     #$01
	lda     (sp),y
	sta     ptr1+1
	lda     (sp)
	sta     ptr1
	ldy     #$03
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	sta     (ptr1)
	dey
	txa
	sta     (ptr1),y
	lda     (sp),y
	sta     ptr1+1
	lda     (sp)
	sta     ptr1
	lda     #$80
	ldy     #$03
	sta     (ptr1),y
	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; void __near__ DbgToggleUserBreak (unsigned int)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_DbgToggleUserBreak: near

.segment	"CODE"

	lda     regbank+4
	ldx     regbank+5
	jsr     pushax
	ldy     #$05
	jsr     pushwysp
	jsr     _DbgIsBreak
	sta     regbank+4
	stx     regbank+4+1
	lda     regbank+4
	ora     regbank+4+1
	beq     L025B
	lda     #$00
	ldy     #$03
	sta     (regbank+4),y
	dec     _DbgBreakCount
	bra     L026B
L025B:	lda     _DbgBreakCount
	cmp     #$0A
	bcc     L0261
	lda     #<(L0264)
	ldx     #>(L0264)
	jsr     pushax
	jsr     _ErrorPrompt
	bra     L026B
L0261:	ldy     #$03
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     _DbgIsRAM
	stx     tmp1
	ora     tmp1
	bne     L0267
	jsr     _BreakInRomError
	bra     L026B
L0267:	jsr     _DbgGetBreakSlot
	sta     regbank+4
	stx     regbank+4+1
	sta     ptr1
	stx     ptr1+1
	ldy     #$03
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	sta     (ptr1)
	dey
	txa
	sta     (ptr1),y
	tya
	ldy     #$03
	sta     (regbank+4),y
	inc     _DbgBreakCount
L026B:	lda     (sp)
	sta     regbank+4
	ldy     #$01
	lda     (sp),y
	sta     regbank+5
	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; void __near__ DbgResetTmpBreaks (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_DbgResetTmpBreaks: near

.segment	"CODE"

	jsr     decsp1
	lda     #<(_DbgBreaks)
	ldx     #>(_DbgBreaks)
	jsr     pushax
	lda     #$00
	ldy     #$02
L056F:	sta     (sp),y
	cmp     #$0A
	bcs     L0276
	dey
	lda     (sp),y
	sta     ptr1+1
	lda     (sp)
	sta     ptr1
	ldy     #$03
	lda     (ptr1),y
	cmp     #$80
	bne     L027D
	ldy     #$01
	lda     (sp),y
	sta     ptr1+1
	lda     (sp)
	sta     ptr1
	lda     #$00
	ldy     #$03
	sta     (ptr1),y
L027D:	ldx     #$00
	lda     #$04
	jsr     addeq0sp
	ldy     #$02
	clc
	lda     #$01
	adc     (sp),y
	bra     L056F
L0276:	jmp     incsp3

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ DbgTmpBreaksOk (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_DbgTmpBreaksOk: near

.segment	"CODE"

	jsr     decsp1
	lda     #<(_DbgBreaks)
	ldx     #>(_DbgBreaks)
	jsr     pushax
	lda     #$00
	ldy     #$02
L0570:	sta     (sp),y
	ldx     #$00
	lda     (sp),y
	cmp     #$0A
	bcs     L0572
	dey
	lda     (sp),y
	sta     ptr1+1
	lda     (sp)
	sta     ptr1
	ldy     #$03
	lda     (ptr1),y
	cmp     #$80
	bne     L028C
	ldy     #$01
	lda     (sp),y
	sta     ptr1+1
	lda     (sp)
	sta     ptr1
	ldy     #$01
	lda     (ptr1),y
	tax
	lda     (ptr1)
	jsr     _DbgIsRAM
	stx     tmp1
	ora     tmp1
	bne     L028C
	jsr     _BreakInRomError
	jsr     _DbgResetTmpBreaks
	ldx     #$00
	txa
	jmp     incsp3
L028C:	ldx     #$00
	lda     #$04
	jsr     addeq0sp
	ldy     #$02
	clc
	lda     #$01
	adc     (sp),y
	bra     L0570
L0572:	lda     #$01
	jmp     incsp3

.endproc

; ---------------------------------------------------------------
; unsigned int __near__ AsmBack (unsigned int, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_AsmBack: near

.segment	"CODE"

	ldy     #$43
	jsr     subysp
	lda     #$06
	jsr     pusha0
L0299:	lda     #$00
	ldy     #$02
	sta     (sp),y
	ldy     #$49
	jsr     pushwysp
	ldy     #$47
	ldx     #$00
	lda     (sp),y
	jsr     mulax3
	jsr     tossubax
	sec
	sbc     (sp)
	pha
	txa
	ldy     #$01
	sbc     (sp),y
	tax
	pla
	ldy     #$43
	jsr     staxysp
L02A2:	ldy     #$44
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     _DbgDisAsmLen
	ldy     #$43
	jsr     addeqysp
	ldy     #$02
	ldx     #$00
	lda     (sp),y
	asl     a
	bcc     L0576
	inx
	clc
L0576:	adc     #$03
	bcc     L02AB
	inx
	clc
L02AB:	adc     sp
	sta     ptr1
	txa
	adc     sp+1
	sta     ptr1+1
	ldy     #$44
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	sta     (ptr1)
	ldy     #$01
	txa
	sta     (ptr1),y
	iny
	lda     (sp),y
	ina
	and     #$1F
	sta     (sp),y
	ldy     #$44
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	ldy     #$46
	cmp     (sp),y
	txa
	iny
	sbc     (sp),y
	bcc     L02A2
	ldy     #$44
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	ldy     #$46
	cmp     (sp),y
	bne     L0579
	txa
	iny
	cmp     (sp),y
	beq     L02B4
L0579:	ldy     #$01
	lda     (sp),y
	bne     L057B
	lda     (sp)
	cmp     #$0C
	bne     L057B
L02B4:	ldy     #$02
	ldx     #$00
	lda     (sp),y
	sec
	ldy     #$45
	sbc     (sp),y
	sec
	sbc     #$01
	and     #$1F
	asl     a
	bcc     L0577
	inx
	clc
L0577:	adc     #$03
	bcc     L02BB
	inx
	clc
L02BB:	adc     sp
	sta     ptr1
	txa
	adc     sp+1
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	lda     (ptr1)
	bra     L029A
L057B:	ldx     #$00
	tya
	jsr     addeq0sp
	jmp     L0299
L029A:	ldy     #$48
	jmp     addysp

.endproc

; ---------------------------------------------------------------
; unsigned int __near__ UpdateAsm (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_UpdateAsm: near

.segment	"CODE"

	ldy     #$2A
	jsr     subysp
	lda     _AsmFrame+8
	jsr     pusha
	lda     _AsmFrame+4
	ina
	jsr     pusha
	jsr     decsp3
	lda     _AsmAddr
	ldy     #$01
	sta     (sp),y
	iny
	lda     _AsmAddr+1
	sta     (sp),y
	tya
	sta     (sp)
	jsr     _AsmBack
	jsr     pushax
	lda     _AsmFrame+5
	ina
	ldy     #$04
L057E:	sta     (sp),y
	cmp     _AsmFrame+7
	jcs     L02C7
	jsr     decsp4
	iny
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	ldy     #$02
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	lda     sp
	ldx     sp+1
	clc
	adc     #$0A
	bcc     L02D3
	inx
L02D3:	sta     (sp)
	ldy     #$01
	txa
	sta     (sp),y
	ldy     #$07
	lda     (sp),y
	jsr     _DbgDisAsm
	ldy     #$05
	sta     (sp),y
	ldy     #$01
	lda     (sp),y
	tax
	lda     (sp)
	cpx     _brk_pc+1
	bne     L02D5
	cmp     _brk_pc
	bne     L02D5
	lda     #$2D
	ldy     #$0A
	sta     (sp),y
	lda     #$3E
	iny
	sta     (sp),y
L02D5:	jsr     pushw0sp
	jsr     _DbgIsBreak
	stx     tmp1
	ora     tmp1
	beq     L02DF
	lda     #$2A
	ldy     #$0B
	sta     (sp),y
L02DF:	ldy     #$01
	lda     (sp),y
	tax
	lda     (sp)
	cpx     _AsmAddr+1
	bne     L02E6
	cmp     _AsmAddr
	bne     L02E6
	tya
	jsr     _revers
	jsr     decsp2
	lda     #$01
	tay
	sta     (sp),y
	ldy     #$06
	lda     (sp),y
	sta     (sp)
	lda     sp
	ldx     sp+1
	clc
	adc     #$08
	bcc     L02EE
	inx
L02EE:	jsr     _cputsxy
	lda     #$00
	jsr     _revers
	bra     L02F1
L02E6:	jsr     decsp2
	tya
	tay
	sta     (sp),y
	ldy     #$06
	lda     (sp),y
	sta     (sp)
	lda     sp
	ldx     sp+1
	clc
	adc     #$08
	bcc     L02F6
	inx
L02F6:	jsr     _cputsxy
L02F1:	ldy     #$05
	lda     (sp),y
	ldx     #$00
	jsr     addeq0sp
	ldy     #$04
	clc
	lda     #$01
	adc     (sp),y
	jmp     L057E
L02C7:	ldy     #$01
	lda     (sp),y
	tax
	lda     (sp)
	ldy     #$2E
	jmp     addysp

.endproc

; ---------------------------------------------------------------
; unsigned int __near__ AsmArg16 (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_AsmArg16: near

.segment	"CODE"

	lda     _AsmAddr
	ldx     _AsmAddr+1
	ina
	bne     L02FD
	inx
L02FD:	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	lda     (ptr1)
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ AsmFollow (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_AsmFollow: near

.segment	"CODE"

	lda     _AsmAddr
	sta     ptr1
	lda     _AsmAddr+1
	sta     ptr1+1
	ldx     #$00
	lda     (ptr1)
	cmp     #$10
	beq     L030D
	cmp     #$20
	beq     L0303
	cmp     #$30
	beq     L030D
	cmp     #$40
	beq     L0581
	cmp     #$4C
	beq     L0303
	cmp     #$50
	beq     L030D
	cmp     #$60
	beq     L0580
	cmp     #$6C
	beq     L0309
	cmp     #$70
	beq     L030D
	cmp     #$90
	beq     L030D
	cmp     #$B0
	beq     L030D
	cmp     #$D0
	beq     L030D
	cmp     #$F0
	beq     L030D
	rts
L0303:	jsr     _AsmArg16
	bra     L0582
L0309:	jsr     _AsmArg16
	bra     L0589
L030D:	lda     _AsmAddr
	ldx     _AsmAddr+1
	clc
	adc     #$02
	bcc     L031E
	inx
L031E:	jsr     pushax
	lda     _AsmAddr
	ldx     _AsmAddr+1
	ina
	bne     L0320
	inx
L0320:	ldy     #$00
	jsr     ldaidx
	jsr     tosaddax
	bra     L0582
L0580:	lda     _DbgSP
	clc
	adc     #$01
	bcc     L0327
	inx
L0327:	inx
	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	lda     (ptr1)
	ina
	bne     L0582
	inx
	bra     L0582
L0581:	lda     _DbgSP
	clc
	adc     #$02
	bcc     L032E
	inx
L032E:	inx
L0589:	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	lda     (ptr1)
L0582:	sta     _AsmAddr
	stx     _AsmAddr+1
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ AsmHome (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_AsmHome: near

.segment	"CODE"

	lda     _brk_pc
	sta     _AsmAddr
	lda     _brk_pc+1
	sta     _AsmAddr+1
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ InitAsm (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_InitAsm: near

.segment	"CODE"

	jsr     _AsmHome
	jmp     _UpdateAsm

.endproc

; ---------------------------------------------------------------
; unsigned int __near__ UpdateReg (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_UpdateReg: near

.segment	"CODE"

	lda     _RegFrame+4
	clc
	adc     #$05
	jsr     pusha
	lda     (sp)
	clc
	adc     #$02
	jsr     pusha
	lda     _RegFrame+5
	jsr     pusha
	ldy     #$02
	lda     (sp),y
	jsr     pusha
	ldy     #$01
	clc
	tya
	adc     (sp),y
	sta     (sp),y
	jsr     _gotoxy
	lda     _brk_pc
	ldx     _brk_pc+1
	jsr     _cputhex16
	ldy     #$01
	lda     (sp),y
	jsr     pusha
	ldy     #$01
	clc
	tya
	adc     (sp),y
	sta     (sp),y
	jsr     _gotoxy
	lda     _brk_sr
	jsr     _cputhex8
	ldy     #$01
	lda     (sp),y
	jsr     pusha
	ldy     #$01
	clc
	tya
	adc     (sp),y
	sta     (sp),y
	jsr     _gotoxy
	lda     _brk_a
	jsr     _cputhex8
	ldy     #$01
	lda     (sp),y
	jsr     pusha
	ldy     #$01
	clc
	tya
	adc     (sp),y
	sta     (sp),y
	jsr     _gotoxy
	lda     _brk_x
	jsr     _cputhex8
	ldy     #$01
	lda     (sp),y
	jsr     pusha
	ldy     #$01
	clc
	tya
	adc     (sp),y
	sta     (sp),y
	jsr     _gotoxy
	lda     _brk_y
	jsr     _cputhex8
	ldy     #$01
	lda     (sp),y
	jsr     pusha
	ldy     #$01
	clc
	tya
	adc     (sp),y
	sta     (sp),y
	jsr     _gotoxy
	lda     _DbgSP
	jsr     _cputhex8
	ldy     #$02
	lda     (sp),y
	jsr     pusha
	ldy     #$01
	clc
	tya
	adc     (sp),y
	sta     (sp),y
	jsr     _gotoxy
	lda     _DbgCS
	ldx     _DbgCS+1
	jsr     _cputhex16
	ldy     #$02
	lda     (sp),y
	jsr     pusha
	ldy     #$01
	clc
	tya
	adc     (sp),y
	sta     (sp),y
	jsr     _gotoxy
	lda     _DbgHI
	ldx     _DbgHI+1
	jsr     _cputhex16
	ldx     #$00
	txa
	jmp     incsp3

.endproc

; ---------------------------------------------------------------
; void __near__ InitReg (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_InitReg: near

.segment	"CODE"

	jmp     _UpdateReg

.endproc

; ---------------------------------------------------------------
; unsigned int __near__ UpdateStack (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_UpdateStack: near

.segment	"CODE"

	lda     _StackAddr
	jsr     pusha
	lda     _StackFrame+4
	ina
	jsr     pusha
	lda     (sp)
	clc
	adc     #$06
	jsr     pusha
	jsr     decsp1
	lda     _StackFrame+7
	sec
	sbc     #$01
L058B:	sta     (sp)
	ldx     #$00
	lda     (sp)
	sec
	sbc     _StackFrame+5
	sta     tmp1
	lda     tmp1
	beq     L03A3
	bcc     L03A3
	ldy     #$02
	lda     (sp),y
	jsr     pusha
	ldy     #$01
	lda     (sp),y
	jsr     _gotoxy
	ldy     #$03
	lda     (sp),y
	jsr     _cputhex8
	ldy     #$01
	lda     (sp),y
	jsr     pusha
	ldy     #$01
	lda     (sp),y
	jsr     _gotoxy
	ldy     #$03
	lda     (sp),y
	sta     ptr1
	lda     #$01
	sta     ptr1+1
	lda     (ptr1)
	jsr     _cputhex8
	ldy     #$03
	clc
	lda     #$01
	adc     (sp),y
	sta     (sp),y
	lda     (sp)
	sec
	sbc     #$01
	bra     L058B
L03A3:	ldy     #$03
	lda     (sp),y
	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; void __near__ StackHome (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_StackHome: near

.segment	"CODE"

	lda     _DbgSP
	ina
	sta     _StackAddr
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ InitStack (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_InitStack: near

.segment	"CODE"

	jsr     _StackHome
	jmp     _UpdateStack

.endproc

; ---------------------------------------------------------------
; unsigned int __near__ UpdateCStack (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_UpdateCStack: near

.segment	"CODE"

	lda     _CStackAddr
	ldx     _CStackAddr+1
	jsr     pushax
	lda     _CStackFrame+4
	clc
	adc     #$05
	jsr     pusha
	jsr     decsp1
	lda     _CStackFrame+7
L058F:	sec
	sbc     #$01
	sta     (sp)
	sec
	sbc     _CStackFrame+5
	sta     tmp1
	lda     tmp1
	beq     L03E2
	bcc     L03E2
	ldy     #$01
	lda     (sp),y
	jsr     pusha
	ldy     #$01
	lda     (sp),y
	jsr     _gotoxy
	ldy     #$03
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	dey
	lda     (ptr1),y
	tax
	lda     (ptr1)
	jsr     _cputhex16
	ldy     #$02
	ldx     #$00
	tya
	jsr     addeqysp
	lda     (sp)
	bra     L058F
L03E2:	jsr     decsp2
	lda     _CStackFrame+4
	ina
	ldy     #$01
	sta     (sp),y
	lda     _CStackFrame+7
	sec
	sbc     #$01
	sta     (sp)
	lda     #<(L03F5)
	ldx     #>(L03F5)
	jsr     _cputsxy
	ldy     #$03
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; void __near__ CStackHome (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_CStackHome: near

.segment	"CODE"

	lda     _DbgCS
	sta     _CStackAddr
	lda     _DbgCS+1
	sta     _CStackAddr+1
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ InitCStack (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_InitCStack: near

.segment	"CODE"

	jsr     _CStackHome
	jmp     _UpdateCStack

.endproc

; ---------------------------------------------------------------
; unsigned int __near__ UpdateDump (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_UpdateDump: near

.segment	"CODE"

	ldy     #$29
	jsr     subysp
	lda     _DumpAddr
	ldx     _DumpAddr+1
	jsr     pushax
	lda     _DumpFrame+4
	ina
	jsr     pusha
	ldy     #$04
	jsr     pushwysp
	lda     _DumpFrame+5
	ina
	ldy     #$05
L0590:	sta     (sp),y
	cmp     _DumpFrame+7
	bcs     L0428
	jsr     decsp2
	dey
	lda     (sp),y
	ldy     #$01
	sta     (sp),y
	ldy     #$07
	lda     (sp),y
	sta     (sp)
	jsr     decsp5
	ldy     #$0B
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	ldy     #$03
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	lda     sp
	ldx     sp+1
	clc
	adc     #$0D
	bcc     L0436
	inx
L0436:	ldy     #$01
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	lda     #$08
	sta     (sp)
	jsr     _DbgMemDump
	jsr     _cputsxy
	ldy     #$03
	ldx     #$00
	lda     #$08
	jsr     addeqysp
	ldy     #$05
	clc
	lda     #$01
	adc     (sp),y
	bra     L0590
L0428:	dey
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	ldy     #$2E
	jmp     addysp

.endproc

; ---------------------------------------------------------------
; void __near__ DumpHome (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_DumpHome: near

.segment	"CODE"

	stz     _DumpAddr
	stz     _DumpAddr+1
	rts

.endproc

; ---------------------------------------------------------------
; unsigned int __near__ GetArg16 (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_GetArg16: near

.segment	"CODE"

	lda     _brk_pc
	ldx     _brk_pc+1
	ina
	bne     L0471
	inx
L0471:	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	lda     (ptr1)
	rts

.endproc

; ---------------------------------------------------------------
; unsigned int __near__ GetStack16 (unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_GetStack16: near

.segment	"CODE"

	ldx     #$00
	lda     (sp)
	clc
	adc     _DbgSP
	bcc     L0592
	inx
	clc
L0592:	adc     #$01
	bcc     L0475
	inx
L0475:	inx
	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	lda     (ptr1)
	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; void __near__ SetRTSBreak (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_SetRTSBreak: near

.segment	"CODE"

	lda     #$00
	jsr     pusha
	jsr     _GetStack16
	ina
	bne     L047A
	inx
L047A:	jsr     pushax
	jmp     _DbgSetTmpBreak

.endproc

; ---------------------------------------------------------------
; void __near__ DbgEntry (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_DbgEntry: near

.segment	"DATA"

L04E6:
	.byte	$01

.segment	"CODE"

	jsr     decsp2
	lda     L04E6
	beq     L04E8
	lda     #$00
	stz     L04E6
	jsr     pusha
	jsr     _RedrawStatic
	jsr     _InitAsm
	jsr     _InitReg
	jsr     _InitStack
	jsr     _InitCStack
	jsr     _UpdateDump
L04E8:	jsr     _AsmHome
	jsr     _UpdateReg
	jsr     _StackHome
	jsr     _CStackHome
	lda     #$00
	sta     (sp)
	jmp     L0595
L04F9:	lda     _ActiveFrame
	ldx     _ActiveFrame+1
	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_Frames)
	sta     ptr1
	lda     tmp1
	adc     #>(_Frames)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	lda     (ptr1)
	sta     ptr1
	stx     ptr1+1
	ldy     #$0C
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     callax
	ldy     #$01
	sta     (sp),y
	lda     (sp),y
	jeq     L0594
	cmp     #$0A
	jeq     L052A
	cmp     #$20
	jeq     L0522
	cmp     #$31
	beq     L0504
	cmp     #$32
	beq     L0504
	cmp     #$33
	beq     L0504
	cmp     #$34
	beq     L0504
	cmp     #$35
	beq     L0504
	cmp     #$3F
	beq     L0512
	cmp     #$63
	jeq     L0594
	cmp     #$68
	beq     L051A
	cmp     #$71
	jeq     L0542
	cmp     #$72
	jeq     L053E
	cmp     #$73
	jeq     L0538
	cmp     #$75
	beq     L0515
	jmp     L0595
L0504:	jsr     decsp3
	ldy     #$04
	ldx     #$00
	lda     (sp),y
	sec
	sbc     #$31
	bcs     L050F
	dex
L050F:	ldy     #$01
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	lda     #$00
	sta     (sp)
	jsr     _ActivateFrame
	jmp     L0595
L0512:	jsr     _HelpHandler
	jmp     L0595
L0515:	jsr     _SetRTSBreak
	lda     #$01
	sta     (sp)
	jmp     L0595
L051A:	lda     _brk_pc
	ldx     _brk_pc+1
	cpx     _AsmAddr+1
	bne     L0596
	cmp     _AsmAddr
	beq     L0595
L0596:	lda     _AsmAddr
	ldx     _AsmAddr+1
	jsr     pushax
	jsr     _DbgSetTmpBreak
	lda     #$01
	sta     (sp)
	bra     L0595
L0522:	tya
	jsr     pusha
	jsr     _SingleStep
	jsr     _DbgTmpBreaksOk
	tax
	beq     L0595
	lda     #$01
	sta     (sp)
	bra     L0595
L052A:	lda     #$00
	jsr     pusha
	jsr     _SingleStep
	jsr     _DbgTmpBreaksOk
	tax
	beq     L0595
	lda     #$01
	sta     (sp)
	bra     L0595
L0594:	tya
	sta     (sp)
	bra     L0595
L0538:	lda     _brk_pc
	ldx     _brk_pc+1
	jsr     _DbgDisAsmLen
	clc
	adc     _brk_pc
	sta     _brk_pc
	txa
	adc     _brk_pc+1
	sta     _brk_pc+1
	jsr     _InitAsm
	bra     L0595
L053E:	lda     _ActiveFrame
	jsr     pusha
	jsr     _Redraw
	bra     L0595
L0542:	jsr     _clrscr
	ldx     #$00
	lda     #$01
	jsr     _exit
L0595:	lda     (sp)
	jeq     L04F9
	jmp     incsp2

.endproc

